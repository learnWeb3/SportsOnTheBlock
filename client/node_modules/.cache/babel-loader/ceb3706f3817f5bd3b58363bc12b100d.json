{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lottie-web'), require('react'), require('prop-types')) : typeof define === 'function' && define.amd ? define(['exports', 'lottie-web', 'react', 'prop-types'], factory) : (global = global || self, factory(global['lottie-react'] = {}, global.Lottie, global.React, global.PropTypes));\n})(this, function (exports, lottie, React, PropTypes) {\n  'use strict';\n\n  lottie = lottie && Object.prototype.hasOwnProperty.call(lottie, 'default') ? lottie['default'] : lottie;\n  var React__default = 'default' in React ? React['default'] : React;\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var useLottie = function useLottie(props, style) {\n    var animationData = props.animationData,\n        loop = props.loop,\n        autoplay = props.autoplay,\n        initialSegment = props.initialSegment,\n        onComplete = props.onComplete,\n        onLoopComplete = props.onLoopComplete,\n        onEnterFrame = props.onEnterFrame,\n        onSegmentStart = props.onSegmentStart,\n        onConfigReady = props.onConfigReady,\n        onDataReady = props.onDataReady,\n        onDataFailed = props.onDataFailed,\n        onLoadedImages = props.onLoadedImages,\n        onDOMLoaded = props.onDOMLoaded,\n        onDestroy = props.onDestroy,\n        lottieRef = props.lottieRef,\n        renderer = props.renderer,\n        name = props.name,\n        assetsPath = props.assetsPath,\n        rendererSettings = props.rendererSettings,\n        rest = _objectWithoutProperties(props, [\"animationData\", \"loop\", \"autoplay\", \"initialSegment\", \"onComplete\", \"onLoopComplete\", \"onEnterFrame\", \"onSegmentStart\", \"onConfigReady\", \"onDataReady\", \"onDataFailed\", \"onLoadedImages\", \"onDOMLoaded\", \"onDestroy\", \"lottieRef\", \"renderer\", \"name\", \"assetsPath\", \"rendererSettings\"]);\n\n    var _useState = React.useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        animationLoaded = _useState2[0],\n        setAnimationLoaded = _useState2[1];\n\n    var animationInstanceRef = React.useRef();\n    var animationContainer = React.useRef(null);\n    /*\n          ======================================\n              INTERACTION METHODS\n          ======================================\n       */\n\n    /**\n     * Play\n     */\n\n    var play = function play() {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();\n    };\n    /**\n     * Stop\n     */\n\n\n    var stop = function stop() {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();\n    };\n    /**\n     * Pause\n     */\n\n\n    var pause = function pause() {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n    };\n    /**\n     * Set animation speed\n     * @param speed\n     */\n\n\n    var setSpeed = function setSpeed(speed) {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);\n    };\n    /**\n     * Got to frame and play\n     * @param value\n     * @param isFrame\n     */\n\n\n    var goToAndPlay = function goToAndPlay(value, isFrame) {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value, isFrame);\n    };\n    /**\n     * Got to frame and stop\n     * @param value\n     * @param isFrame\n     */\n\n\n    var goToAndStop = function goToAndStop(value, isFrame) {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value, isFrame);\n    };\n    /**\n     * Set animation direction\n     * @param direction\n     */\n\n\n    var setDirection = function setDirection(direction) {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);\n    };\n    /**\n     * Play animation segments\n     * @param segments\n     * @param forceFlag\n     */\n\n\n    var playSegments = function playSegments(segments, forceFlag) {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);\n    };\n    /**\n     * Set sub frames\n     * @param useSubFrames\n     */\n\n\n    var setSubframe = function setSubframe(useSubFrames) {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);\n    };\n    /**\n     * Get animation duration\n     * @param inFrames\n     */\n\n\n    var getDuration = function getDuration(inFrames) {\n      var _a;\n\n      return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);\n    };\n    /**\n     * Destroy animation\n     */\n\n\n    var destroy = function destroy() {\n      var _a;\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n    };\n    /*\n          ======================================\n              LOTTIE\n          ======================================\n       */\n\n    /**\n     * Load a new animation, and if it's the case, destroy the previous one\n     * @param {Object} forcedConfigs\n     */\n\n\n    var loadAnimation = function loadAnimation() {\n      var forcedConfigs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a; // Return if the container ref is null\n\n\n      if (!animationContainer.current) {\n        return;\n      } // Destroy any previous instance\n\n\n      (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy(); // Build the animation configuration\n\n      var config = _objectSpread2(_objectSpread2(_objectSpread2({}, props), forcedConfigs), {}, {\n        container: animationContainer.current\n      }); // Save the animation instance\n\n\n      animationInstanceRef.current = lottie.loadAnimation(config);\n      setAnimationLoaded(!!animationInstanceRef.current);\n    };\n    /**\n     * Initialize and listen for changes that need to reinitialize Lottie\n     */\n\n\n    React.useEffect(function () {\n      loadAnimation();\n    }, [animationData, loop, autoplay, initialSegment]);\n    /*\n          ======================================\n              EVENTS\n          ======================================\n       */\n\n    /**\n     * Reinitialize listener on change\n     */\n\n    React.useEffect(function () {\n      var partialListeners = [{\n        name: \"complete\",\n        handler: onComplete\n      }, {\n        name: \"loopComplete\",\n        handler: onLoopComplete\n      }, {\n        name: \"enterFrame\",\n        handler: onEnterFrame\n      }, {\n        name: \"segmentStart\",\n        handler: onSegmentStart\n      }, {\n        name: \"config_ready\",\n        handler: onConfigReady\n      }, {\n        name: \"data_ready\",\n        handler: onDataReady\n      }, {\n        name: \"data_failed\",\n        handler: onDataFailed\n      }, {\n        name: \"loaded_images\",\n        handler: onLoadedImages\n      }, {\n        name: \"DOMLoaded\",\n        handler: onDOMLoaded\n      }, {\n        name: \"destroy\",\n        handler: onDestroy\n      }];\n      var listeners = partialListeners.filter(function (listener) {\n        return listener.handler != null;\n      });\n\n      if (!listeners.length) {\n        return;\n      }\n\n      var deregisterList = listeners.map(\n      /**\n       * Handle the process of adding an event listener\n       * @param {Listener} listener\n       * @return {Function} Function that deregister the listener\n       */\n      function (listener) {\n        var _a;\n\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler); // Return a function to deregister this listener\n\n        return function () {\n          var _a;\n\n          (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener(listener.name, listener.handler);\n        };\n      }); // Deregister listeners on unmount\n\n      return function () {\n        deregisterList.forEach(function (deregister) {\n          return deregister();\n        });\n      };\n    }, [onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy]);\n    /**\n     * Build the animation view\n     */\n\n    var View = /*#__PURE__*/React__default.createElement(\"div\", Object.assign({\n      style: style,\n      ref: animationContainer\n    }, rest));\n    return {\n      View: View,\n      play: play,\n      stop: stop,\n      pause: pause,\n      setSpeed: setSpeed,\n      goToAndStop: goToAndStop,\n      goToAndPlay: goToAndPlay,\n      setDirection: setDirection,\n      playSegments: playSegments,\n      setSubframe: setSubframe,\n      getDuration: getDuration,\n      destroy: destroy,\n      animationLoaded: animationLoaded,\n      animationItem: animationInstanceRef.current\n    };\n  };\n\n  function getContainerVisibility(container) {\n    var _container$getBoundin = container.getBoundingClientRect(),\n        top = _container$getBoundin.top,\n        height = _container$getBoundin.height;\n\n    var current = window.innerHeight - top;\n    var max = window.innerHeight + height;\n    return current / max;\n  }\n\n  function getContainerCursorPosition(container, cursorX, cursorY) {\n    var _container$getBoundin2 = container.getBoundingClientRect(),\n        top = _container$getBoundin2.top,\n        left = _container$getBoundin2.left,\n        width = _container$getBoundin2.width,\n        height = _container$getBoundin2.height;\n\n    var x = (cursorX - left) / width;\n    var y = (cursorY - top) / height;\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  var useInitInteractivity = function useInitInteractivity(_ref) {\n    var wrapperRef = _ref.wrapperRef,\n        animationItem = _ref.animationItem,\n        mode = _ref.mode,\n        actions = _ref.actions;\n    React.useEffect(function () {\n      var wrapper = wrapperRef.current;\n\n      if (!wrapper || !animationItem) {\n        return;\n      }\n\n      animationItem.stop();\n\n      var scrollModeHandler = function scrollModeHandler() {\n        var assignedSegment = null;\n\n        var scrollHandler = function scrollHandler() {\n          var currentPercent = getContainerVisibility(wrapper); // Find the first action that satisfies the current position conditions\n\n          var action = actions.find(function (_ref2) {\n            var visibility = _ref2.visibility;\n            return visibility && currentPercent >= visibility[0] && currentPercent <= visibility[1];\n          }); // Skip if no matching action was found!\n\n          if (!action) {\n            return;\n          }\n\n          if (action.type === \"seek\" && action.visibility && action.frames.length === 2) {\n            // Seek: Go to a frame based on player scroll position action\n            var frameToGo = action.frames[0] + Math.ceil((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0]) * action.frames[1]); //! goToAndStop must be relative to the start of the current segment\n\n            animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);\n          }\n\n          if (action.type === \"loop\") {\n            // Loop: Loop a given frames\n            if (assignedSegment === null) {\n              // if not playing any segments currently. play those segments and save to state\n              animationItem.playSegments(action.frames, true);\n              assignedSegment = action.frames;\n            } else {\n              // if playing any segments currently.\n              //check if segments in state are equal to the frames selected by action\n              if (assignedSegment !== action.frames) {\n                // if they are not equal. new segments are to be loaded\n                animationItem.playSegments(action.frames, true);\n                assignedSegment = action.frames;\n              } else if (animationItem.isPaused) {\n                // if they are equal the play method must be called only if lottie is paused\n                animationItem.playSegments(action.frames, true);\n                assignedSegment = action.frames;\n              }\n            }\n          }\n\n          if (action.type === \"play\" && animationItem.isPaused) {\n            // Play: Reset segments and continue playing full animation from current position\n            animationItem.resetSegments(true);\n            animationItem.play();\n          }\n\n          if (action.type === \"stop\") {\n            // Stop: Stop playback\n            animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);\n          }\n        };\n\n        document.addEventListener(\"scroll\", scrollHandler);\n        return function () {\n          document.removeEventListener(\"scroll\", scrollHandler);\n        };\n      };\n\n      var cursorModeHandler = function cursorModeHandler() {\n        var handleCursor = function handleCursor(_x, _y) {\n          var x = _x;\n          var y = _y; // Resolve cursor position if cursor is inside container\n\n          if (x !== -1 && y !== -1) {\n            // Get container cursor position\n            var pos = getContainerCursorPosition(wrapper, x, y); // Use the resolved position\n\n            x = pos.x;\n            y = pos.y;\n          } // Find the first action that satisfies the current position conditions\n\n\n          var action = actions.find(function (_ref3) {\n            var position = _ref3.position;\n\n            if (position && Array.isArray(position.x) && Array.isArray(position.y)) {\n              return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n            }\n\n            if (position && !Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n              return x === position.x && y === position.y;\n            }\n\n            return false;\n          }); // Skip if no matching action was found!\n\n          if (!action) {\n            return;\n          } // Process action types:\n\n\n          if (action.type === \"seek\" && action.position && Array.isArray(action.position.x) && Array.isArray(action.position.y) && action.frames.length === 2) {\n            // Seek: Go to a frame based on player scroll position action\n            var xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n            var yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n            animationItem.playSegments(action.frames, true);\n            animationItem.goToAndStop(Math.ceil((xPercent + yPercent) / 2 * (action.frames[1] - action.frames[0])), true);\n          }\n\n          if (action.type === \"loop\") {\n            animationItem.playSegments(action.frames, true);\n          }\n\n          if (action.type === \"play\") {\n            // Play: Reset segments and continue playing full animation from current position\n            if (animationItem.isPaused) {\n              animationItem.resetSegments(false);\n            }\n\n            animationItem.playSegments(action.frames);\n          }\n\n          if (action.type === \"stop\") {\n            animationItem.goToAndStop(action.frames[0], true);\n          }\n        };\n\n        var mouseMoveHandler = function mouseMoveHandler(ev) {\n          handleCursor(ev.clientX, ev.clientY);\n        };\n\n        var mouseOutHandler = function mouseOutHandler() {\n          handleCursor(-1, -1);\n        };\n\n        wrapper.addEventListener(\"mousemove\", mouseMoveHandler);\n        wrapper.addEventListener(\"mouseout\", mouseOutHandler);\n        return function () {\n          wrapper.removeEventListener(\"mousemove\", mouseMoveHandler);\n          wrapper.removeEventListener(\"mouseout\", mouseOutHandler);\n        };\n      };\n\n      switch (mode) {\n        case \"scroll\":\n          return scrollModeHandler();\n\n        case \"cursor\":\n          return cursorModeHandler();\n      }\n    }, [mode, animationItem]);\n  };\n\n  var useLottieInteractivity = function useLottieInteractivity(_ref4) {\n    var actions = _ref4.actions,\n        mode = _ref4.mode,\n        lottieObj = _ref4.lottieObj;\n    var animationItem = lottieObj.animationItem,\n        View = lottieObj.View;\n    var wrapperRef = React.useRef(null);\n    useInitInteractivity({\n      actions: actions,\n      animationItem: animationItem,\n      mode: mode,\n      wrapperRef: wrapperRef\n    });\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      ref: wrapperRef\n    }, View);\n  };\n\n  var Lottie = function Lottie(props) {\n    var _a;\n\n    var style = props.style,\n        interactivity = props.interactivity,\n        lottieProps = _objectWithoutProperties(props, [\"style\", \"interactivity\"]);\n    /**\n     * Initialize the 'useLottie' hook\n     */\n\n\n    var _useLottie = useLottie(lottieProps, style),\n        View = _useLottie.View,\n        play = _useLottie.play,\n        stop = _useLottie.stop,\n        pause = _useLottie.pause,\n        setSpeed = _useLottie.setSpeed,\n        goToAndStop = _useLottie.goToAndStop,\n        goToAndPlay = _useLottie.goToAndPlay,\n        setDirection = _useLottie.setDirection,\n        playSegments = _useLottie.playSegments,\n        setSubframe = _useLottie.setSubframe,\n        getDuration = _useLottie.getDuration,\n        destroy = _useLottie.destroy,\n        animationLoaded = _useLottie.animationLoaded,\n        animationItem = _useLottie.animationItem;\n    /**\n     * Make the hook variables/methods available through the provided 'lottieRef'\n     */\n\n\n    React.useEffect(function () {\n      if (props.lottieRef) {\n        props.lottieRef.current = {\n          play: play,\n          stop: stop,\n          pause: pause,\n          setSpeed: setSpeed,\n          goToAndPlay: goToAndPlay,\n          goToAndStop: goToAndStop,\n          setDirection: setDirection,\n          playSegments: playSegments,\n          setSubframe: setSubframe,\n          getDuration: getDuration,\n          destroy: destroy,\n          animationLoaded: animationLoaded,\n          animationItem: animationItem\n        };\n      }\n    }, [(_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current]);\n\n    if (interactivity) {\n      var EnhancedView = useLottieInteractivity(_objectSpread2({\n        lottieObj: {\n          View: View,\n          play: play,\n          stop: stop,\n          pause: pause,\n          setSpeed: setSpeed,\n          goToAndStop: goToAndStop,\n          goToAndPlay: goToAndPlay,\n          setDirection: setDirection,\n          playSegments: playSegments,\n          setSubframe: setSubframe,\n          getDuration: getDuration,\n          destroy: destroy,\n          animationLoaded: animationLoaded,\n          animationItem: animationItem\n        }\n      }, interactivity));\n      return EnhancedView;\n    }\n\n    return View;\n  };\n\n  Lottie.propTypes = {\n    animationData: PropTypes.shape(undefined).isRequired,\n    loop: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    autoplay: PropTypes.bool,\n    initialSegment: PropTypes.arrayOf(PropTypes.number.isRequired),\n    onComplete: PropTypes.func,\n    onLoopComplete: PropTypes.func,\n    onEnterFrame: PropTypes.func,\n    onSegmentStart: PropTypes.func,\n    onConfigReady: PropTypes.func,\n    onDataReady: PropTypes.func,\n    onDataFailed: PropTypes.func,\n    onLoadedImages: PropTypes.func,\n    onDOMLoaded: PropTypes.func,\n    onDestroy: PropTypes.func,\n    style: PropTypes.shape(undefined)\n  };\n  Lottie.defaultProps = {\n    loop: true,\n    autoplay: true,\n    initialSegment: null,\n    onComplete: null,\n    onLoopComplete: null,\n    onEnterFrame: null,\n    onSegmentStart: null,\n    onConfigReady: null,\n    onDataReady: null,\n    onDataFailed: null,\n    onLoadedImages: null,\n    onDOMLoaded: null,\n    onDestroy: null,\n    style: undefined\n  };\n  var Animator = Lottie;\n  var useAnimator = useLottie;\n  exports.LottiePlayer = lottie;\n  exports.Animator = Animator;\n  exports.default = Lottie;\n  exports.useAnimator = useAnimator;\n  exports.useLottie = useLottie;\n  exports.useLottieInteractivity = useLottieInteractivity;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../compiled/hooks/useLottie.js","../compiled/hooks/useLottieInteractivity.js","../compiled/components/Lottie.js","../compiled/index.js"],"names":["useLottie","animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings","rest","props","animationLoaded","setAnimationLoaded","useState","animationInstanceRef","useRef","animationContainer","play","_a","stop","pause","setSpeed","goToAndPlay","goToAndStop","setDirection","playSegments","setSubframe","getDuration","destroy","loadAnimation","forcedConfigs","config","container","current","lottie","useEffect","partialListeners","handler","listeners","listener","deregisterList","deregister","View","style","ref","animationItem","top","height","window","max","left","width","x","cursorX","y","cursorY","useInitInteractivity","wrapperRef","mode","actions","wrapper","scrollModeHandler","assignedSegment","scrollHandler","currentPercent","getContainerVisibility","action","visibility","frameToGo","Math","document","cursorModeHandler","handleCursor","pos","getContainerCursorPosition","position","Array","Number","xPercent","yPercent","mouseMoveHandler","ev","mouseOutHandler","useLottieInteractivity","lottieObj","Lottie","interactivity","lottieProps","EnhancedView","PropTypes","undefined","Animator","useAnimator"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, } from \"react\";\nimport lottie from \"lottie-web\";\nconst useLottie = (props, style) => {\n    const { animationData, loop, autoplay, initialSegment, onComplete, onLoopComplete, onEnterFrame, onSegmentStart, onConfigReady, onDataReady, onDataFailed, onLoadedImages, onDOMLoaded, onDestroy, \n    // Specified here to take them out from the 'rest'\n    lottieRef, renderer, name, assetsPath, rendererSettings, \n    // TODO: find a better way to extract the html props to avoid specifying\n    //  all the props that we want to exclude (as you can see above)\n    ...rest } = props;\n    const [animationLoaded, setAnimationLoaded] = useState(false);\n    const animationInstanceRef = useRef();\n    const animationContainer = useRef(null);\n    /*\n          ======================================\n              INTERACTION METHODS\n          ======================================\n       */\n    /**\n     * Play\n     */\n    const play = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.play();\n    };\n    /**\n     * Stop\n     */\n    const stop = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.stop();\n    };\n    /**\n     * Pause\n     */\n    const pause = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n    };\n    /**\n     * Set animation speed\n     * @param speed\n     */\n    const setSpeed = (speed) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSpeed(speed);\n    };\n    /**\n     * Got to frame and play\n     * @param value\n     * @param isFrame\n     */\n    const goToAndPlay = (value, isFrame) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndPlay(value, isFrame);\n    };\n    /**\n     * Got to frame and stop\n     * @param value\n     * @param isFrame\n     */\n    const goToAndStop = (value, isFrame) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.goToAndStop(value, isFrame);\n    };\n    /**\n     * Set animation direction\n     * @param direction\n     */\n    const setDirection = (direction) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setDirection(direction);\n    };\n    /**\n     * Play animation segments\n     * @param segments\n     * @param forceFlag\n     */\n    const playSegments = (segments, forceFlag) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.playSegments(segments, forceFlag);\n    };\n    /**\n     * Set sub frames\n     * @param useSubFrames\n     */\n    const setSubframe = (useSubFrames) => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.setSubframe(useSubFrames);\n    };\n    /**\n     * Get animation duration\n     * @param inFrames\n     */\n    const getDuration = (inFrames) => {\n        var _a;\n        return (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.getDuration(inFrames);\n    };\n    /**\n     * Destroy animation\n     */\n    const destroy = () => {\n        var _a;\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n    };\n    /*\n          ======================================\n              LOTTIE\n          ======================================\n       */\n    /**\n     * Load a new animation, and if it's the case, destroy the previous one\n     * @param {Object} forcedConfigs\n     */\n    const loadAnimation = (forcedConfigs = {}) => {\n        var _a;\n        // Return if the container ref is null\n        if (!animationContainer.current) {\n            return;\n        }\n        // Destroy any previous instance\n        (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        // Build the animation configuration\n        const config = {\n            ...props,\n            ...forcedConfigs,\n            container: animationContainer.current,\n        };\n        // Save the animation instance\n        animationInstanceRef.current = lottie.loadAnimation(config);\n        setAnimationLoaded(!!animationInstanceRef.current);\n    };\n    /**\n     * Initialize and listen for changes that need to reinitialize Lottie\n     */\n    useEffect(() => {\n        loadAnimation();\n    }, [animationData, loop, autoplay, initialSegment]);\n    /*\n          ======================================\n              EVENTS\n          ======================================\n       */\n    /**\n     * Reinitialize listener on change\n     */\n    useEffect(() => {\n        const partialListeners = [\n            { name: \"complete\", handler: onComplete },\n            { name: \"loopComplete\", handler: onLoopComplete },\n            { name: \"enterFrame\", handler: onEnterFrame },\n            { name: \"segmentStart\", handler: onSegmentStart },\n            { name: \"config_ready\", handler: onConfigReady },\n            { name: \"data_ready\", handler: onDataReady },\n            { name: \"data_failed\", handler: onDataFailed },\n            { name: \"loaded_images\", handler: onLoadedImages },\n            { name: \"DOMLoaded\", handler: onDOMLoaded },\n            { name: \"destroy\", handler: onDestroy },\n        ];\n        const listeners = partialListeners.filter((listener) => listener.handler != null);\n        if (!listeners.length) {\n            return;\n        }\n        const deregisterList = listeners.map(\n        /**\n         * Handle the process of adding an event listener\n         * @param {Listener} listener\n         * @return {Function} Function that deregister the listener\n         */\n        (listener) => {\n            var _a;\n            (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener(listener.name, listener.handler);\n            // Return a function to deregister this listener\n            return () => {\n                var _a;\n                (_a = animationInstanceRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener(listener.name, listener.handler);\n            };\n        });\n        // Deregister listeners on unmount\n        return () => {\n            deregisterList.forEach((deregister) => deregister());\n        };\n    }, [\n        onComplete,\n        onLoopComplete,\n        onEnterFrame,\n        onSegmentStart,\n        onConfigReady,\n        onDataReady,\n        onDataFailed,\n        onLoadedImages,\n        onDOMLoaded,\n        onDestroy,\n    ]);\n    /**\n     * Build the animation view\n     */\n    const View = React.createElement(\"div\", Object.assign({ style: style, ref: animationContainer }, rest));\n    return {\n        View,\n        play,\n        stop,\n        pause,\n        setSpeed,\n        goToAndStop,\n        goToAndPlay,\n        setDirection,\n        playSegments,\n        setSubframe,\n        getDuration,\n        destroy,\n        animationLoaded,\n        animationItem: animationInstanceRef.current,\n    };\n};\nexport default useLottie;\n","import React, { useEffect, useRef } from \"react\";\n// helpers\nexport function getContainerVisibility(container) {\n    const { top, height } = container.getBoundingClientRect();\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    return current / max;\n}\nexport function getContainerCursorPosition(container, cursorX, cursorY) {\n    const { top, left, width, height } = container.getBoundingClientRect();\n    const x = (cursorX - left) / width;\n    const y = (cursorY - top) / height;\n    return { x, y };\n}\nexport const useInitInteractivity = ({ wrapperRef, animationItem, mode, actions, }) => {\n    useEffect(() => {\n        const wrapper = wrapperRef.current;\n        if (!wrapper || !animationItem) {\n            return;\n        }\n        animationItem.stop();\n        const scrollModeHandler = () => {\n            let assignedSegment = null;\n            const scrollHandler = () => {\n                const currentPercent = getContainerVisibility(wrapper);\n                // Find the first action that satisfies the current position conditions\n                const action = actions.find(({ visibility }) => visibility &&\n                    currentPercent >= visibility[0] &&\n                    currentPercent <= visibility[1]);\n                // Skip if no matching action was found!\n                if (!action) {\n                    return;\n                }\n                if (action.type === \"seek\" &&\n                    action.visibility &&\n                    action.frames.length === 2) {\n                    // Seek: Go to a frame based on player scroll position action\n                    const frameToGo = action.frames[0] +\n                        Math.ceil(((currentPercent - action.visibility[0]) /\n                            (action.visibility[1] - action.visibility[0])) *\n                            action.frames[1]);\n                    //! goToAndStop must be relative to the start of the current segment\n                    animationItem.goToAndStop(frameToGo - animationItem.firstFrame - 1, true);\n                }\n                if (action.type === \"loop\") {\n                    // Loop: Loop a given frames\n                    if (assignedSegment === null) {\n                        // if not playing any segments currently. play those segments and save to state\n                        animationItem.playSegments(action.frames, true);\n                        assignedSegment = action.frames;\n                    }\n                    else {\n                        // if playing any segments currently.\n                        //check if segments in state are equal to the frames selected by action\n                        if (assignedSegment !== action.frames) {\n                            // if they are not equal. new segments are to be loaded\n                            animationItem.playSegments(action.frames, true);\n                            assignedSegment = action.frames;\n                        }\n                        else if (animationItem.isPaused) {\n                            // if they are equal the play method must be called only if lottie is paused\n                            animationItem.playSegments(action.frames, true);\n                            assignedSegment = action.frames;\n                        }\n                    }\n                }\n                if (action.type === \"play\" && animationItem.isPaused) {\n                    // Play: Reset segments and continue playing full animation from current position\n                    animationItem.resetSegments(true);\n                    animationItem.play();\n                }\n                if (action.type === \"stop\") {\n                    // Stop: Stop playback\n                    animationItem.goToAndStop(action.frames[0] - animationItem.firstFrame - 1, true);\n                }\n            };\n            document.addEventListener(\"scroll\", scrollHandler);\n            return () => {\n                document.removeEventListener(\"scroll\", scrollHandler);\n            };\n        };\n        const cursorModeHandler = () => {\n            const handleCursor = (_x, _y) => {\n                let x = _x;\n                let y = _y;\n                // Resolve cursor position if cursor is inside container\n                if (x !== -1 && y !== -1) {\n                    // Get container cursor position\n                    const pos = getContainerCursorPosition(wrapper, x, y);\n                    // Use the resolved position\n                    x = pos.x;\n                    y = pos.y;\n                }\n                // Find the first action that satisfies the current position conditions\n                const action = actions.find(({ position }) => {\n                    if (position &&\n                        Array.isArray(position.x) &&\n                        Array.isArray(position.y)) {\n                        return (x >= position.x[0] &&\n                            x <= position.x[1] &&\n                            y >= position.y[0] &&\n                            y <= position.y[1]);\n                    }\n                    if (position &&\n                        !Number.isNaN(position.x) &&\n                        !Number.isNaN(position.y)) {\n                        return x === position.x && y === position.y;\n                    }\n                    return false;\n                });\n                // Skip if no matching action was found!\n                if (!action) {\n                    return;\n                }\n                // Process action types:\n                if (action.type === \"seek\" &&\n                    action.position &&\n                    Array.isArray(action.position.x) &&\n                    Array.isArray(action.position.y) &&\n                    action.frames.length === 2) {\n                    // Seek: Go to a frame based on player scroll position action\n                    const xPercent = (x - action.position.x[0]) /\n                        (action.position.x[1] - action.position.x[0]);\n                    const yPercent = (y - action.position.y[0]) /\n                        (action.position.y[1] - action.position.y[0]);\n                    animationItem.playSegments(action.frames, true);\n                    animationItem.goToAndStop(Math.ceil(((xPercent + yPercent) / 2) *\n                        (action.frames[1] - action.frames[0])), true);\n                }\n                if (action.type === \"loop\") {\n                    animationItem.playSegments(action.frames, true);\n                }\n                if (action.type === \"play\") {\n                    // Play: Reset segments and continue playing full animation from current position\n                    if (animationItem.isPaused) {\n                        animationItem.resetSegments(false);\n                    }\n                    animationItem.playSegments(action.frames);\n                }\n                if (action.type === \"stop\") {\n                    animationItem.goToAndStop(action.frames[0], true);\n                }\n            };\n            const mouseMoveHandler = (ev) => {\n                handleCursor(ev.clientX, ev.clientY);\n            };\n            const mouseOutHandler = () => {\n                handleCursor(-1, -1);\n            };\n            wrapper.addEventListener(\"mousemove\", mouseMoveHandler);\n            wrapper.addEventListener(\"mouseout\", mouseOutHandler);\n            return () => {\n                wrapper.removeEventListener(\"mousemove\", mouseMoveHandler);\n                wrapper.removeEventListener(\"mouseout\", mouseOutHandler);\n            };\n        };\n        switch (mode) {\n            case \"scroll\":\n                return scrollModeHandler();\n            case \"cursor\":\n                return cursorModeHandler();\n        }\n    }, [mode, animationItem]);\n};\nconst useLottieInteractivity = ({ actions, mode, lottieObj, }) => {\n    const { animationItem, View } = lottieObj;\n    const wrapperRef = useRef(null);\n    useInitInteractivity({ actions, animationItem, mode, wrapperRef });\n    return React.createElement(\"div\", { ref: wrapperRef }, View);\n};\nexport default useLottieInteractivity;\n","import { useEffect } from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport useLottie from \"../hooks/useLottie\";\nimport useLottieInteractivity from \"../hooks/useLottieInteractivity\";\nconst Lottie = (props) => {\n    var _a;\n    const { style, interactivity, ...lottieProps } = props;\n    /**\n     * Initialize the 'useLottie' hook\n     */\n    const { View, play, stop, pause, setSpeed, goToAndStop, goToAndPlay, setDirection, playSegments, setSubframe, getDuration, destroy, animationLoaded, animationItem, } = useLottie(lottieProps, style);\n    /**\n     * Make the hook variables/methods available through the provided 'lottieRef'\n     */\n    useEffect(() => {\n        if (props.lottieRef) {\n            props.lottieRef.current = {\n                play,\n                stop,\n                pause,\n                setSpeed,\n                goToAndPlay,\n                goToAndStop,\n                setDirection,\n                playSegments,\n                setSubframe,\n                getDuration,\n                destroy,\n                animationLoaded,\n                animationItem,\n            };\n        }\n    }, [(_a = props.lottieRef) === null || _a === void 0 ? void 0 : _a.current]);\n    if (interactivity) {\n        const EnhancedView = useLottieInteractivity({\n            lottieObj: {\n                View,\n                play,\n                stop,\n                pause,\n                setSpeed,\n                goToAndStop,\n                goToAndPlay,\n                setDirection,\n                playSegments,\n                setSubframe,\n                getDuration,\n                destroy,\n                animationLoaded,\n                animationItem,\n            },\n            ...interactivity,\n        });\n        return EnhancedView;\n    }\n    return View;\n};\nLottie.propTypes = {\n    animationData: PropTypes.shape(undefined).isRequired,\n    loop: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    autoplay: PropTypes.bool,\n    initialSegment: PropTypes.arrayOf(PropTypes.number.isRequired),\n    onComplete: PropTypes.func,\n    onLoopComplete: PropTypes.func,\n    onEnterFrame: PropTypes.func,\n    onSegmentStart: PropTypes.func,\n    onConfigReady: PropTypes.func,\n    onDataReady: PropTypes.func,\n    onDataFailed: PropTypes.func,\n    onLoadedImages: PropTypes.func,\n    onDOMLoaded: PropTypes.func,\n    onDestroy: PropTypes.func,\n    style: PropTypes.shape(undefined),\n};\nLottie.defaultProps = {\n    loop: true,\n    autoplay: true,\n    initialSegment: null,\n    onComplete: null,\n    onLoopComplete: null,\n    onEnterFrame: null,\n    onSegmentStart: null,\n    onConfigReady: null,\n    onDataReady: null,\n    onDataFailed: null,\n    onLoadedImages: null,\n    onDOMLoaded: null,\n    onDestroy: null,\n    style: undefined,\n};\nexport default Lottie;\n","import LottiePlayer from \"lottie-web\";\nimport Lottie from \"./components/Lottie\";\nimport useLottie from \"./hooks/useLottie\";\nimport useLottieInteractivity from \"./hooks/useLottieInteractivity\";\n// TODO: For backward compatibility, remove on v2\nexport const Animator = Lottie;\nexport const useAnimator = useLottie;\nexport { LottiePlayer, useLottie, useLottieInteractivity };\nexport default Lottie;\nexport * from \"./types\";\n"]},"metadata":{},"sourceType":"script"}
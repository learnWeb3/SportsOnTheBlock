{"ast":null,"code":"const unique = arr => {\n  const mapping = {};\n  arr.map((e, i) => {\n    if (!mapping[e]) {\n      mapping[e] = 1;\n    }\n  });\n  return Object.keys(mapping);\n};\n\nconst sum = bets => bets.reduce((prev, next) => prev + parseInt(next.amount), 0);\n\nconst format = betValue => {\n  if (betValue > 0) {\n    return bettingContract.utils.fromWei(`${betValue}`);\n  } else {\n    return \"0.00\";\n  }\n};\n\nconst getStats = _bets => {\n  let transactionCount, uniqueAddressCount, avgTransactionCountPerAddress, avgGamePerCompetition, totalFunds, gamesCount, competitionCount;\n  transactionCount = _bets.reduce((prev, next) => prev + next.bets.length, 0);\n  uniqueAddressCount = unique(_bets.map(game => game.uniqueUsers)).length;\n  avgTransactionCountPerAddress = Math.ceil(transactionCount / uniqueAddressCount);\n  avgGamePerCompetition = Math.ceil(formattedGames.length / competitions.length);\n  totalFunds = bettingContract.utils.fromWei(`${_bets.reduce((prev, next) => prev + next.betsValue, 0)}`).slice(0, 4);\n  gamesCount = formattedGames.length;\n  competitionCount = competitions.length;\n  return {\n    transactionCount,\n    uniqueAddressCount,\n    avgTransactionCountPerAddress,\n    avgGamePerCompetition,\n    totalFunds,\n    gamesCount,\n    competitionCount\n  };\n};\n\nexport { format, sum, unique, getStats };","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/utils/index.js"],"names":["unique","arr","mapping","map","e","i","Object","keys","sum","bets","reduce","prev","next","parseInt","amount","format","betValue","bettingContract","utils","fromWei","getStats","_bets","transactionCount","uniqueAddressCount","avgTransactionCountPerAddress","avgGamePerCompetition","totalFunds","gamesCount","competitionCount","length","game","uniqueUsers","Math","ceil","formattedGames","competitions","betsValue","slice"],"mappings":"AAAA,MAAMA,MAAM,GAAIC,GAAD,IAAS;AACtB,QAAMC,OAAO,GAAG,EAAhB;AACAD,EAAAA,GAAG,CAACE,GAAJ,CAAQ,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChB,QAAI,CAACH,OAAO,CAACE,CAAD,CAAZ,EAAiB;AACfF,MAAAA,OAAO,CAACE,CAAD,CAAP,GAAa,CAAb;AACD;AACF,GAJD;AAKA,SAAOE,MAAM,CAACC,IAAP,CAAYL,OAAZ,CAAP;AACD,CARD;;AAUA,MAAMM,GAAG,GAAIC,IAAD,IACVA,IAAI,CAACC,MAAL,CAAY,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGE,QAAQ,CAACD,IAAI,CAACE,MAAN,CAA3C,EAA0D,CAA1D,CADF;;AAGA,MAAMC,MAAM,GAAIC,QAAD,IAAc;AAC3B,MAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAOC,eAAe,CAACC,KAAhB,CAAsBC,OAAtB,CAA+B,GAAEH,QAAS,EAA1C,CAAP;AACD,GAFD,MAEO;AACL,WAAO,MAAP;AACD;AACF,CAND;;AAQA,MAAMI,QAAQ,GAAIC,KAAD,IAAW;AAC1B,MAAIC,gBAAJ,EACEC,kBADF,EAEEC,6BAFF,EAGEC,qBAHF,EAIEC,UAJF,EAKEC,UALF,EAMEC,gBANF;AAQAN,EAAAA,gBAAgB,GAAGD,KAAK,CAACX,MAAN,CAAa,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAAI,CAACH,IAAL,CAAUoB,MAA9C,EAAsD,CAAtD,CAAnB;AACAN,EAAAA,kBAAkB,GAAGvB,MAAM,CAACqB,KAAK,CAAClB,GAAN,CAAW2B,IAAD,IAAUA,IAAI,CAACC,WAAzB,CAAD,CAAN,CAA8CF,MAAnE;AACAL,EAAAA,6BAA6B,GAAGQ,IAAI,CAACC,IAAL,CAC9BX,gBAAgB,GAAGC,kBADW,CAAhC;AAGAE,EAAAA,qBAAqB,GAAGO,IAAI,CAACC,IAAL,CACtBC,cAAc,CAACL,MAAf,GAAwBM,YAAY,CAACN,MADf,CAAxB;AAGAH,EAAAA,UAAU,GAAGT,eAAe,CAACC,KAAhB,CACVC,OADU,CACD,GAAEE,KAAK,CAACX,MAAN,CAAa,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAAI,CAACwB,SAAzC,EAAoD,CAApD,CAAuD,EADxD,EAEVC,KAFU,CAEJ,CAFI,EAED,CAFC,CAAb;AAGAV,EAAAA,UAAU,GAAGO,cAAc,CAACL,MAA5B;AACAD,EAAAA,gBAAgB,GAAGO,YAAY,CAACN,MAAhC;AACA,SAAO;AACLP,IAAAA,gBADK;AAELC,IAAAA,kBAFK;AAGLC,IAAAA,6BAHK;AAILC,IAAAA,qBAJK;AAKLC,IAAAA,UALK;AAMLC,IAAAA,UANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CA/BD;;AAiCA,SAAQb,MAAR,EAAgBP,GAAhB,EAAqBR,MAArB,EAA6BoB,QAA7B","sourcesContent":["const unique = (arr) => {\n  const mapping = {};\n  arr.map((e, i) => {\n    if (!mapping[e]) {\n      mapping[e] = 1;\n    }\n  });\n  return Object.keys(mapping);\n};\n\nconst sum = (bets) =>\n  bets.reduce((prev, next) => prev + parseInt(next.amount), 0);\n\nconst format = (betValue) => {\n  if (betValue > 0) {\n    return bettingContract.utils.fromWei(`${betValue}`);\n  } else {\n    return \"0.00\";\n  }\n};\n\nconst getStats = (_bets) => {\n  let transactionCount,\n    uniqueAddressCount,\n    avgTransactionCountPerAddress,\n    avgGamePerCompetition,\n    totalFunds,\n    gamesCount,\n    competitionCount;\n\n  transactionCount = _bets.reduce((prev, next) => prev + next.bets.length, 0);\n  uniqueAddressCount = unique(_bets.map((game) => game.uniqueUsers)).length;\n  avgTransactionCountPerAddress = Math.ceil(\n    transactionCount / uniqueAddressCount\n  );\n  avgGamePerCompetition = Math.ceil(\n    formattedGames.length / competitions.length\n  );\n  totalFunds = bettingContract.utils\n    .fromWei(`${_bets.reduce((prev, next) => prev + next.betsValue, 0)}`)\n    .slice(0, 4);\n  gamesCount = formattedGames.length;\n  competitionCount = competitions.length;\n  return {\n    transactionCount,\n    uniqueAddressCount,\n    avgTransactionCountPerAddress,\n    avgGamePerCompetition,\n    totalFunds,\n    gamesCount,\n    competitionCount,\n  };\n};\n\nexport {format, sum, unique, getStats}\n"]},"metadata":{},"sourceType":"module"}
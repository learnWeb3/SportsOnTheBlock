{"ast":null,"code":"var _jsxFileName = \"/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/BetForm/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ModalClosePanel from \"../ModalClosePanel/index\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport clsx from \"clsx\";\nimport { Grid, makeStyles, TextField, Typography, Button, Hidden, MenuItem, Select } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {},\n  containerFlex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  textfield: {\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\",\n    width: \"100%\"\n  },\n  button: {\n    marginTop: \"1rem\",\n    width: \"100%\"\n  },\n  formLg: {\n    borderRadius: \"4px\"\n  },\n  form: {\n    backgroundColor: \"#FFF\",\n    padding: 24,\n    minHeight: \"100%\"\n  },\n  formContainer: {\n    width: \"100%\"\n  },\n  formContainerSm: {\n    minHeight: \"100%\",\n    top: \"4rem\",\n    position: \"relative\"\n  },\n  title: {\n    marginBottom: \"1rem\"\n  },\n  backPanel: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  backArrow: {\n    marginBottom: 24,\n    marginRight: 8,\n    cursor: \"pointer\"\n  }\n}));\n\nconst BetForm = ({\n  title,\n  buttonLabel,\n  setModalToogled,\n  game: {\n    cover,\n    description,\n    ended,\n    started,\n    team1Name,\n    team1Score,\n    team2Name,\n    team2Score,\n    winner,\n    id\n  }\n}) => {\n  _s();\n\n  const validateFields = () => {\n    fields.map(field => {\n      if (field.required && formData[field.id] === \"\") {\n        field.error === \"field is required\";\n      }\n    });\n  };\n\n  const matches = useMediaQuery(\"(max-width:600px)\");\n  const classes = useStyles();\n  const [isFormValid, setFormValid] = useState(false);\n  const [formData, setFormData] = useState({\n    betSide: \"\",\n    betValue: \"\"\n  });\n  const fields = [{\n    type: \"select\",\n    labelId: \"Choose your side\",\n    id: \"betSide\",\n    value: \"\",\n    items: [{\n      id: \"1\",\n      name: team1Name === null || team1Name === void 0 ? void 0 : team1Name.toUpperCase()\n    }, {\n      id: \"N\",\n      name: \"NULL\"\n    }, {\n      id: \"2\",\n      name: team2Name === null || team2Name === void 0 ? void 0 : team2Name.toUpperCase()\n    }],\n    onChange: event => {\n      setFormData({ ...formData,\n        betSide: event.target.value\n      });\n    }\n  }, {\n    type: \"number\",\n    error: \"\",\n    required: true,\n    readOnly: false,\n    helperText: \"\",\n    label: \"Bet amount\",\n    id: \"betValue\",\n    onInput: event => {\n      setFormData({ ...formData,\n        betValue: event.target.value\n      });\n    }\n  }];\n\n  const handleSubmit = () => {};\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Hidden, {\n      mdDown: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        lg: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      lg: 4,\n      className: classes.containerFlex,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: matches ? clsx(classes.formContainer, classes.formContainerSm) : classes.formContainer,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          className: matches ? classes.form : clsx(classes.form, classes.formLg),\n          children: [/*#__PURE__*/_jsxDEV(ModalClosePanel, {\n            setModalToogled: setModalToogled\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            component: \"h1\",\n            className: classes.title,\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), fields.map(field => {\n            var _field$items;\n\n            return field.type === \"number\" ? /*#__PURE__*/_jsxDEV(TextField, {\n              id: field.id,\n              label: field.label.toUpperCase(),\n              variant: \"outlined\",\n              className: classes.textfield,\n              required: field.required,\n              readOnly: field.readOnly,\n              error: field.error,\n              helperText: field.helperText,\n              type: field.type,\n              value: formData[field.id],\n              onInput: field.onInput\n            }, field.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this) : field.type === \"select\" && /*#__PURE__*/_jsxDEV(Select, {\n              labelId: field.labelId,\n              id: field.id,\n              value: formData[field.id],\n              onChange: field.onChange,\n              className: classes.textfield,\n              children: (_field$items = field.items) === null || _field$items === void 0 ? void 0 : _field$items.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.id,\n                children: item.name\n              }, `game-${item.id}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            variant: \"contained\",\n            className: classes.button,\n            size: \"large\",\n            onClick: handleSubmit,\n            disabled: !isFormValid,\n            children: buttonLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n      mdDown: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        lg: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BetForm, \"5IvEK0Zl9sZoIsq9capS4+/Yo/U=\", false, function () {\n  return [useMediaQuery, useStyles];\n});\n\n_c = BetForm;\nexport default BetForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BetForm\");","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/BetForm/index.jsx"],"names":["React","useState","ModalClosePanel","useMediaQuery","clsx","Grid","makeStyles","TextField","Typography","Button","Hidden","MenuItem","Select","useStyles","root","containerFlex","display","flexDirection","justifyContent","alignItems","textfield","marginTop","marginBottom","width","button","formLg","borderRadius","form","backgroundColor","padding","minHeight","formContainer","formContainerSm","top","position","title","backPanel","backArrow","marginRight","cursor","BetForm","buttonLabel","setModalToogled","game","cover","description","ended","started","team1Name","team1Score","team2Name","team2Score","winner","id","validateFields","fields","map","field","required","formData","error","matches","classes","isFormValid","setFormValid","setFormData","betSide","betValue","type","labelId","value","items","name","toUpperCase","onChange","event","target","readOnly","helperText","label","onInput","handleSubmit","item"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ModalClosePanel from \"../ModalClosePanel/index\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport clsx from \"clsx\";\nimport {\n  Grid,\n  makeStyles,\n  TextField,\n  Typography,\n  Button,\n  Hidden,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  containerFlex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  textfield: {\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\",\n    width: \"100%\",\n  },\n  button: {\n    marginTop: \"1rem\",\n    width: \"100%\",\n  },\n  formLg: {\n    borderRadius: \"4px\",\n  },\n  form: {\n    backgroundColor: \"#FFF\",\n    padding: 24,\n    minHeight: \"100%\",\n  },\n  formContainer: {\n    width: \"100%\",\n  },\n  formContainerSm: {\n    minHeight: \"100%\",\n    top: \"4rem\",\n    position: \"relative\",\n  },\n  title: {\n    marginBottom: \"1rem\",\n  },\n  backPanel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  backArrow: {\n    marginBottom: 24,\n    marginRight: 8,\n    cursor: \"pointer\",\n  },\n}));\n\nconst BetForm = ({\n  title,\n  buttonLabel,\n  setModalToogled,\n  game: {\n    cover,\n    description,\n    ended,\n    started,\n    team1Name,\n    team1Score,\n    team2Name,\n    team2Score,\n    winner,\n    id,\n  },\n}) => {\n\n  const validateFields = () =>{\n      fields.map((field)=>{\n          if (field.required && formData[field.id] === \"\"){\n            field.error === \"field is required\";\n          }\n      });\n  }\n  const matches = useMediaQuery(\"(max-width:600px)\");\n  const classes = useStyles();\n  const [isFormValid, setFormValid] = useState(false);\n  const [formData, setFormData] = useState({\n    betSide: \"\",\n    betValue: \"\",\n  });\n  const fields = [\n    {\n      type: \"select\",\n      labelId: \"Choose your side\",\n      id: \"betSide\",\n      value: \"\",\n      items: [\n        { id: \"1\", name: team1Name?.toUpperCase() },\n        { id: \"N\", name: \"NULL\" },\n        { id: \"2\", name: team2Name?.toUpperCase() },\n      ],\n      onChange: (event) => {\n        setFormData({ ...formData, betSide: event.target.value });\n\n      },\n    },\n    {\n      type: \"number\",\n      error: \"\",\n      required: true,\n      readOnly: false,\n      helperText: \"\",\n      label: \"Bet amount\",\n      id: \"betValue\",\n      onInput: (event) => {\n        setFormData({ ...formData, betValue: event.target.value });\n      },\n    },\n  ];\n\n  const handleSubmit = () => {};\n\n  return (\n    <Grid container className={classes.root}>\n      <Hidden mdDown>\n        <Grid item lg={4}></Grid>\n      </Hidden>\n      <Grid item xs={12} lg={4} className={classes.containerFlex}>\n        <div\n          className={\n            matches\n              ? clsx(classes.formContainer, classes.formContainerSm)\n              : classes.formContainer\n          }\n        >\n          <form\n            noValidate\n            autoComplete=\"off\"\n            className={\n              matches ? classes.form : clsx(classes.form, classes.formLg)\n            }\n          >\n            <ModalClosePanel setModalToogled={setModalToogled} />\n            <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\n              {title}\n            </Typography>\n            {fields.map((field) =>\n              field.type === \"number\" ? (\n                <TextField\n                  key={field.id}\n                  id={field.id}\n                  label={field.label.toUpperCase()}\n                  variant=\"outlined\"\n                  className={classes.textfield}\n                  required={field.required}\n                  readOnly={field.readOnly}\n                  error={field.error}\n                  helperText={field.helperText}\n                  type={field.type}\n                  value={formData[field.id]}\n                  onInput={field.onInput}\n                />\n              ) : (\n                field.type === \"select\" && (\n                  <Select\n                    labelId={field.labelId}\n                    id={field.id}\n                    value={formData[field.id]}\n                    onChange={field.onChange}\n                    className={classes.textfield}\n                  >\n                    {field.items?.map((item) => (\n                      <MenuItem key={`game-${item.id}`} value={item.id}>\n                        {item.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                )\n              )\n            )}\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              className={classes.button}\n              size=\"large\"\n              onClick={handleSubmit}\n              disabled={!isFormValid}\n            >\n              {buttonLabel}\n            </Button>\n          </form>\n        </div>\n      </Grid>\n\n      <Hidden mdDown>\n        <Grid item lg={4}></Grid>\n      </Hidden>\n    </Grid>\n  );\n};\n\nexport default BetForm;\n"]},"metadata":{},"sourceType":"module"}
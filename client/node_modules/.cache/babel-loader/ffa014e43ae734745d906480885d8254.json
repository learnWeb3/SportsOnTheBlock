{"ast":null,"code":"var _jsxFileName = \"/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/GameCard/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Context from \"../../context/index\";\nimport { useComponentState } from \"../../hooks\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport { CardContent, CardMedia, Collapse } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport Modal from \"../Modal /index\";\nimport BetForm from \"../BetForm/index\";\nimport CardActionBar from \"../CardActionBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: 16,\n    marginBottom: 16,\n    textAlign: \"left\",\n    padding: 16\n  },\n  media: {\n    width: \"100%\"\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\"\n  },\n  datagrid: {\n    height: 275,\n    width: \"100%\"\n  },\n  collapse: {\n    paddingTop: 16\n  }\n}));\n\nconst GameCardDashBoard = ({\n  gameId\n}) => {\n  _s();\n\n  const classes = useStyles(); // Access custom hooks to display errors and loading animations\n\n  const {\n    state,\n    setState,\n    Error,\n    LoadingAnimation,\n    isModalToogled,\n    setModalToogled\n  } = useComponentState(); // 0- check if user favorite the current game\n\n  const {\n    favorites,\n    setFavorites\n  } = useContext(Context);\n  const [isFavorite, setIsFavorite] = useState();\n  useEffect(() => {\n    const favoriteId = favorites.find(_gameId => _gameId === gameId);\n    favoriteId ? setIsFavorite(true) : setIsFavorite(false);\n  }, []);\n\n  const handleAddFavorite = gameId => {\n    if (!isFavorite) {\n      setIsFavorite(true);\n      localStorage.setItem(\"favoriteGames\", JSON.stringify([...favorites, gameId]));\n      setFavorites([...favorites, gameId]);\n    } else {\n      setIsFavorite(false);\n      const newFavorites = favorites.filter(_gameId => _gameId !== gameId);\n      localStorage.setItem(\"favoriteGames\", JSON.stringify(newFavorites));\n      setFavorites(newFavorites);\n    }\n  };\n\n  const columns = [{\n    field: \"user\",\n    headerName: \"#\",\n    width: 600\n  }, {\n    field: \"value\",\n    headerName: \"value\",\n    width: 300\n  }, {\n    field: \"date\",\n    headerName: \"date\",\n    width: 300\n  }]; // 3- Transactions\n\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded); // setTransactions\n  };\n\n  if (state.status === \"loading\") return /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 42\n  }, this);else if (state.status === \"loaded\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardActionBar, {\n          handleAddFavorite: handleAddFavorite,\n          isFavorite: isFavorite,\n          handleExpandClick: handleExpandClick,\n          expanded: expanded,\n          gameId: gameId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n          className: classes.collapse,\n          in: expanded,\n          timeout: \"auto\",\n          unmountOnExit: true,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.datagrid,\n            children: /*#__PURE__*/_jsxDEV(DataGrid, {\n              rows: [],\n              columns: columns\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), isModalToogled && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Modal, {\n        component: BetForm,\n        title: \"Place a bet\",\n        buttonLabel: \"confirm\",\n        setModalToogled: setModalToogled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), document.querySelector(\"body\"))]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      code: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(GameCardDashBoard, \"l1peNKnwcknScGacAU6DqDu1fB0=\", false, function () {\n  return [useStyles, useComponentState];\n});\n\n_c = GameCardDashBoard;\nexport default GameCardDashBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameCardDashBoard\");","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/GameCard/index.jsx"],"names":["React","useState","useEffect","useContext","ReactDOM","Context","useComponentState","makeStyles","Card","CardContent","CardMedia","Collapse","DataGrid","Modal","BetForm","CardActionBar","useStyles","theme","root","marginTop","marginBottom","textAlign","padding","media","width","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","datagrid","height","collapse","paddingTop","GameCardDashBoard","gameId","classes","state","setState","Error","LoadingAnimation","isModalToogled","setModalToogled","favorites","setFavorites","isFavorite","setIsFavorite","favoriteId","find","_gameId","handleAddFavorite","localStorage","setItem","JSON","stringify","newFavorites","filter","columns","field","headerName","expanded","setExpanded","handleExpandClick","status","createPortal","document","querySelector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Context from \"../../context/index\";\nimport { useComponentState } from \"../../hooks\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport { CardContent, CardMedia, Collapse } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport Modal from \"../Modal /index\";\nimport BetForm from \"../BetForm/index\";\nimport CardActionBar from \"../CardActionBar\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: 16,\n    marginBottom: 16,\n    textAlign: \"left\",\n    padding: 16,\n  },\n  media: {\n    width: \"100%\",\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  datagrid: {\n    height: 275,\n    width: \"100%\",\n  },\n  collapse: {\n    paddingTop: 16,\n  },\n}));\n\nconst GameCardDashBoard = ({ gameId }) => {\n  const classes = useStyles();\n  // Access custom hooks to display errors and loading animations\n  const {\n    state,\n    setState,\n    Error,\n    LoadingAnimation,\n    isModalToogled,\n    setModalToogled,\n  } = useComponentState();\n  // 0- check if user favorite the current game\n  const { favorites, setFavorites } = useContext(Context);\n  const [isFavorite, setIsFavorite] = useState();\n\n  useEffect(() => {\n    const favoriteId = favorites.find((_gameId) => _gameId === gameId);\n    favoriteId ? setIsFavorite(true) : setIsFavorite(false);\n  }, []);\n\n  const handleAddFavorite = (gameId) => {\n    if (!isFavorite) {\n      setIsFavorite(true);\n      localStorage.setItem(\n        \"favoriteGames\",\n        JSON.stringify([...favorites, gameId])\n      );\n      setFavorites([...favorites, gameId]);\n    } else {\n      setIsFavorite(false);\n      const newFavorites = favorites.filter((_gameId) => _gameId !== gameId);\n      localStorage.setItem(\"favoriteGames\", JSON.stringify(newFavorites));\n      setFavorites(newFavorites);\n    }\n  };\n\n  const columns = [\n    { field: \"user\", headerName: \"#\", width: 600 },\n    { field: \"value\", headerName: \"value\", width: 300 },\n    { field: \"date\", headerName: \"date\", width: 300 },\n  ];\n\n  // 3- Transactions\n  const [expanded, setExpanded] = React.useState(false);\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n    // setTransactions\n  };\n\n  if (state.status === \"loading\") return <LoadingAnimation />;\n  else if (state.status === \"loaded\") {\n    return (\n      <>\n        <Card className={classes.root}>\n          <CardMedia />\n          <CardContent></CardContent>\n          <CardActionBar\n            handleAddFavorite={handleAddFavorite}\n            isFavorite={isFavorite}\n            handleExpandClick={handleExpandClick}\n            expanded={expanded}\n            gameId={gameId}\n          />\n          <Collapse\n            className={classes.collapse}\n            in={expanded}\n            timeout=\"auto\"\n            unmountOnExit\n          >\n            <div className={classes.datagrid}>\n              <DataGrid rows={[]} columns={columns} />\n            </div>\n          </Collapse>\n        </Card>\n        {isModalToogled &&\n          ReactDOM.createPortal(\n            <Modal\n              component={BetForm}\n              title=\"Place a bet\"\n              buttonLabel=\"confirm\"\n              setModalToogled={setModalToogled}\n            />,\n            document.querySelector(\"body\")\n          )}\n      </>\n    );\n  } else {\n    return <Error code={500} />;\n  }\n};\n\nexport default GameCardDashBoard;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/pages/Dashboard/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../../config/index\";\nimport { useComponentState, useProvider } from \"../../hooks\";\nimport { BettingContract } from \"../../services/Contract\";\nimport { Container, makeStyles, Grid } from \"@material-ui/core\";\nimport GameCard from \"../../components/GameCard\";\nimport FiltersArea from \"../../components/FiltersArea\";\nimport MainMetrics from \"../../components/MainMetrics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  gradient: {\n    backgroundImage: \"linear-gradient(315deg, #ffffff 0%, #d7e1ec 74%)\",\n    top: \"4rem\",\n    position: \"relative\",\n    minHeight: \"100vh\"\n  },\n  gameContainer: {\n    paddingTop: 16\n  }\n}));\n\nconst Dashboard = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    state,\n    setState,\n    Error,\n    LoadingAnimation\n  } = useComponentState();\n  const {\n    provider,\n\n    /*setProvider,*/\n    accounts\n    /*setAccounts*/\n\n  } = useProvider();\n  const [bettingContract, setBettingContract] = useState(null);\n  const [competition, setCompetition] = useState(null);\n  const [competitions, setCompetitions] = useState(null);\n  const [games, setGames] = useState(null);\n  const [isFilterGameToActive, setFilterGameToActive] = useState(true);\n  const [mainMetrics, setMainMetrics] = useState(null);\n  useEffect(() => {\n    const fetchAndSetBettingContract = async (provider, accounts) => {\n      try {\n        const _bettingContract = new BettingContract(provider, config.initial_contract_address, accounts);\n\n        setBettingContract(_bettingContract.contract);\n\n        const _competitions = await _bettingContract.contract.methods.getCompetitions().call();\n\n        const formattedCompetitions = _competitions.map(({\n          available,\n          cover,\n          description,\n          name\n        }, index) => ({\n          name,\n          cover,\n          description,\n          available,\n          id: index + 1\n        }));\n\n        setCompetitions(formattedCompetitions);\n        setCompetition(formattedCompetitions[0]);\n      } catch (error) {\n        setState({\n          status: \"error\",\n          code: 500\n        });\n      }\n    };\n\n    if (provider && accounts) {\n      fetchAndSetBettingContract(provider, accounts);\n    }\n  }, [provider, accounts]);\n  useEffect(() => {\n    const getAndSetGames = async () => {\n      const _games = await bettingContract.methods.getGames(competition.id).call();\n\n      const formattedGames = _games.map(({\n        cover,\n        description,\n        ended,\n        started,\n        team1Name,\n        team1Score,\n        team2Name,\n        team2Score,\n        winner,\n        start\n      }, index) => ({\n        cover,\n        description,\n        ended,\n        started,\n        team1Name,\n        team1Score,\n        team2Name,\n        team2Score,\n        winner,\n        start,\n        id: index + 1\n      }));\n\n      const unique = arr => {\n        const mapping = {};\n        arr.map((e, i) => {\n          if (!mapping[e]) {\n            mapping[e] = 1;\n          }\n        });\n        return Object.keys(mapping);\n      };\n\n      const _bets = await Promise.all(formattedGames.map(async game => {\n        let bets = await bettingContract.methods.getBets(game.id).call();\n        bets = bets.map(({\n          amount,\n          outcome,\n          user\n        }) => ({\n          amount,\n          outcome,\n          user\n        }));\n        let uniqueUsers = unique(bets.map(bet => bet.user));\n        let betsValue = bets.reduce((prev, next) => prev + parseInt(next.amount), 0);\n        return {\n          gameId: game.id,\n          bets,\n          betsCount: bets.length,\n          betsValue,\n          uniqueUsers,\n          uniqueUserCount: uniqueUsers.length\n        };\n      }));\n\n      let transactionCount, uniqueAddressCount, avgTransactionCountPerAddress;\n      transactionCount = _bets.reduce((prev, next) => prev + next.bets.length, 0);\n      uniqueAddressCount = unique(_bets.map(game => game.uniqueUsers)).length;\n      avgTransactionCountPerAddress = Math.floor(transactionCount / uniqueAddressCount);\n      setMainMetrics({\n        gamesCount: formattedGames.length,\n        competitionCount: competitions.length,\n        transactionCount,\n        uniqueAddressCount,\n        totalFunds: bettingContract.utils.fromWei(`${_bets.reduce((prev, next) => prev + next.betsValue, 0)}`).slice(0, 4),\n        avgGamePerCompetition,\n        avgTransactionCountPerAddress\n      });\n      setGames(formattedGames.filter(game => game.ended !== isFilterGameToActive));\n    };\n\n    if (competitions && competition) {\n      getAndSetGames();\n    }\n  }, [competitions, competition, bettingContract, isFilterGameToActive]);\n  if (state.status === \"loading\") return /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 42\n  }, this);else if (state.status === \"loaded\") return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.gradient,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(MainMetrics, {\n            userCount: mainMetrics.uniqueAddressCount,\n            totalFunds: mainMetrics.totalFunds,\n            competitionCount: mainMetrics.competitionCount,\n            gameCount: mainMetrics.gamesCount,\n            avgGamePerCompetition: mainMetrics.avgGamePerCompetition,\n            transactionCount: mainMetrics.transactionCount,\n            avgTransactionCountPerAddress: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FiltersArea, {\n            competition: competition,\n            competitions: competitions,\n            setCompetition: selectedCompetition => setCompetition(selectedCompetition),\n            isFilterGameToActive: isFilterGameToActive,\n            setFilterGameToActive: value => setFilterGameToActive(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            className: classes.gameContainer,\n            children: games === null || games === void 0 ? void 0 : games.map(game => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              lg: 4,\n              children: /*#__PURE__*/_jsxDEV(GameCard, {\n                competition: competition,\n                provider: provider,\n                accounts: accounts,\n                game: game,\n                bettingContract: bettingContract\n              }, game.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 7\n  }, this);else {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      code: state.code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(Dashboard, \"nYLZMgrw/pTYQfwezqBTk7MEtss=\", false, function () {\n  return [useStyles, useComponentState, useProvider];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/pages/Dashboard/index.jsx"],"names":["React","useState","useEffect","config","useComponentState","useProvider","BettingContract","Container","makeStyles","Grid","GameCard","FiltersArea","MainMetrics","useStyles","gradient","backgroundImage","top","position","minHeight","gameContainer","paddingTop","Dashboard","classes","state","setState","Error","LoadingAnimation","provider","accounts","bettingContract","setBettingContract","competition","setCompetition","competitions","setCompetitions","games","setGames","isFilterGameToActive","setFilterGameToActive","mainMetrics","setMainMetrics","fetchAndSetBettingContract","_bettingContract","initial_contract_address","contract","_competitions","methods","getCompetitions","call","formattedCompetitions","map","available","cover","description","name","index","id","error","status","code","getAndSetGames","_games","getGames","formattedGames","ended","started","team1Name","team1Score","team2Name","team2Score","winner","start","unique","arr","mapping","e","i","Object","keys","_bets","Promise","all","game","bets","getBets","amount","outcome","user","uniqueUsers","bet","betsValue","reduce","prev","next","parseInt","gameId","betsCount","length","uniqueUserCount","transactionCount","uniqueAddressCount","avgTransactionCountPerAddress","Math","floor","gamesCount","competitionCount","totalFunds","utils","fromWei","slice","avgGamePerCompetition","filter","selectedCompetition","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport config from \"../../config/index\";\nimport { useComponentState, useProvider } from \"../../hooks\";\nimport { BettingContract } from \"../../services/Contract\";\nimport { Container, makeStyles, Grid } from \"@material-ui/core\";\nimport GameCard from \"../../components/GameCard\";\nimport FiltersArea from \"../../components/FiltersArea\";\nimport MainMetrics from \"../../components/MainMetrics\";\n\nconst useStyles = makeStyles(() => ({\n  gradient: {\n    backgroundImage: \"linear-gradient(315deg, #ffffff 0%, #d7e1ec 74%)\",\n    top: \"4rem\",\n    position: \"relative\",\n    minHeight: \"100vh\",\n  },\n  gameContainer: {\n    paddingTop: 16,\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const { state, setState, Error, LoadingAnimation } = useComponentState();\n  const { provider, /*setProvider,*/ accounts /*setAccounts*/ } = useProvider();\n  const [bettingContract, setBettingContract] = useState(null);\n  const [competition, setCompetition] = useState(null);\n  const [competitions, setCompetitions] = useState(null);\n  const [games, setGames] = useState(null);\n  const [isFilterGameToActive, setFilterGameToActive] = useState(true);\n  const [mainMetrics, setMainMetrics] = useState(null);\n\n  useEffect(() => {\n    const fetchAndSetBettingContract = async (provider, accounts) => {\n      try {\n        const _bettingContract = new BettingContract(\n          provider,\n          config.initial_contract_address,\n          accounts\n        );\n        setBettingContract(_bettingContract.contract);\n        const _competitions = await _bettingContract.contract.methods\n          .getCompetitions()\n          .call();\n        const formattedCompetitions = _competitions.map(\n          ({ available, cover, description, name }, index) => ({\n            name,\n            cover,\n            description,\n            available,\n            id: index + 1,\n          })\n        );\n        setCompetitions(formattedCompetitions);\n        setCompetition(formattedCompetitions[0]);\n      } catch (error) {\n        setState({ status: \"error\", code: 500 });\n      }\n    };\n\n    if (provider && accounts) {\n      fetchAndSetBettingContract(provider, accounts);\n    }\n  }, [provider, accounts]);\n\n  useEffect(() => {\n    const getAndSetGames = async () => {\n      const _games = await bettingContract.methods\n        .getGames(competition.id)\n        .call();\n\n      const formattedGames = _games.map(\n        (\n          {\n            cover,\n            description,\n            ended,\n            started,\n            team1Name,\n            team1Score,\n            team2Name,\n            team2Score,\n            winner,\n            start,\n          },\n          index\n        ) => ({\n          cover,\n          description,\n          ended,\n          started,\n          team1Name,\n          team1Score,\n          team2Name,\n          team2Score,\n          winner,\n          start,\n          id: index + 1,\n        })\n      );\n\n      const unique = (arr) => {\n        const mapping = {};\n        arr.map((e, i) => {\n          if (!mapping[e]) {\n            mapping[e] = 1;\n          } \n        });\n        return Object.keys(mapping)\n      };\n      const _bets = await Promise.all(\n        formattedGames.map(async (game) => {\n          let bets = await bettingContract.methods.getBets(game.id).call();\n          bets = bets.map(({ amount, outcome, user }) => ({\n            amount,\n            outcome,\n            user,\n          }));\n          let uniqueUsers = unique(bets.map((bet) => bet.user))\n          let betsValue = bets.reduce((prev, next)=>prev+parseInt(next.amount), 0)\n          return {\n            gameId: game.id,\n            bets,\n            betsCount: bets.length,\n            betsValue,\n            uniqueUsers,\n            uniqueUserCount: uniqueUsers.length\n          };\n        })\n      );\n      \n      let transactionCount,uniqueAddressCount,avgTransactionCountPerAddress\n      transactionCount = _bets.reduce((prev, next)=>prev+next.bets.length, 0);\n      uniqueAddressCount = unique(_bets.map((game)=>game.uniqueUsers)).length;\n      avgTransactionCountPerAddress = Math.floor(transactionCount/uniqueAddressCount);\n      setMainMetrics({\n        gamesCount: formattedGames.length,\n        competitionCount: competitions.length,\n        transactionCount,\n        uniqueAddressCount,\n        totalFunds:bettingContract.utils.fromWei(`${_bets.reduce((prev, next)=>prev+next.betsValue, 0)}`).slice(0,4),\n        avgGamePerCompetition,\n        avgTransactionCountPerAddress\n      });\n      setGames(\n        formattedGames.filter((game) => game.ended !== isFilterGameToActive)\n      );\n    };\n    if (competitions && competition) {\n      getAndSetGames();\n    }\n  }, [competitions, competition, bettingContract, isFilterGameToActive]);\n\n  if (state.status === \"loading\") return <LoadingAnimation />;\n  else if (state.status === \"loaded\")\n    return (\n      <div className={classes.gradient}>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <MainMetrics\n                userCount={mainMetrics.uniqueAddressCount}\n                totalFunds={mainMetrics.totalFunds}\n                competitionCount={mainMetrics.competitionCount}\n                gameCount={mainMetrics.gamesCount}\n                avgGamePerCompetition={mainMetrics.avgGamePerCompetition}\n                transactionCount={mainMetrics.transactionCount}\n                avgTransactionCountPerAddress={3}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FiltersArea\n                competition={competition}\n                competitions={competitions}\n                setCompetition={(selectedCompetition) =>\n                  setCompetition(selectedCompetition)\n                }\n                isFilterGameToActive={isFilterGameToActive}\n                setFilterGameToActive={(value) => setFilterGameToActive(value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2} className={classes.gameContainer}>\n                {games?.map((game) => (\n                  <Grid item xs={12} lg={4}>\n                    <GameCard\n                      key={game.id}\n                      competition={competition}\n                      provider={provider}\n                      accounts={accounts}\n                      game={game}\n                      bettingContract={bettingContract}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  else {\n    return <Error code={state.code} />;\n  }\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
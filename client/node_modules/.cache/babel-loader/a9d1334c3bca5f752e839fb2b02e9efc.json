{"ast":null,"code":"var _jsxFileName = \"/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/BetForm/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useComponentState } from \"../../hooks\";\nimport SnackBar from \"../SnackBar.index\";\nimport ModalClosePanel from \"../ModalClosePanel/index\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport clsx from \"clsx\";\nimport { Grid, makeStyles, TextField, Typography, Button, Hidden, MenuItem, Select } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {},\n  containerFlex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  textfield: {\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\",\n    width: \"100%\"\n  },\n  button: {\n    marginTop: \"1rem\",\n    width: \"100%\"\n  },\n  formLg: {\n    borderRadius: \"4px\"\n  },\n  form: {\n    backgroundColor: \"#FFF\",\n    padding: 24,\n    minHeight: \"100%\"\n  },\n  formContainer: {\n    width: \"100%\"\n  },\n  formContainerSm: {\n    minHeight: \"100%\",\n    top: \"4rem\",\n    position: \"relative\"\n  },\n  title: {\n    marginBottom: \"1rem\"\n  },\n  backPanel: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  backArrow: {\n    marginBottom: 24,\n    marginRight: 8,\n    cursor: \"pointer\"\n  }\n}));\n\nconst BetForm = ({\n  title,\n  buttonLabel,\n  setModalToogled,\n  bettingContract,\n  accounts,\n  game: {\n    cover,\n    description,\n    ended,\n    started,\n    team1Name,\n    team1Score,\n    team2Name,\n    team2Score,\n    winner,\n    id\n  }\n}) => {\n  _s();\n\n  const {\n    alert,\n    setAlert\n  } = useComponentState();\n  const matches = useMediaQuery(\"(max-width:600px)\");\n  const classes = useStyles();\n  const [isFormValid, setFormValid] = useState(false);\n  const [formData, setFormData] = useState({\n    betSide: {\n      value: \"\",\n      helperText: \"\",\n      error: false\n    },\n    betValue: {\n      value: \"\",\n      error: false\n    }\n  });\n\n  const validateFields = event => {\n    let formIsValid = true;\n    fields.map(field => {\n      if (event.target.name === field.name) {\n        const newFormData = { ...formData,\n          [field.name]: {\n            value: event.target.value,\n            error: event.target.value === \"\",\n            helperText: \"Required\"\n          }\n        };\n        setFormData(newFormData);\n        formIsValid = event.target.value === \"\" ? false : formIsValid;\n      }\n    });\n    setFormValid(formIsValid);\n  };\n\n  const fields = [{\n    type: \"select\",\n    labelId: \"Choose your side\",\n    id: \"betSide\",\n    name: \"betSide\",\n    value: \"\",\n    items: [{\n      id: 1,\n      name: team1Name === null || team1Name === void 0 ? void 0 : team1Name.toUpperCase()\n    }, {\n      id: 0,\n      name: \"NULL\"\n    }, {\n      id: 2,\n      name: team2Name === null || team2Name === void 0 ? void 0 : team2Name.toUpperCase()\n    }],\n    onChange: event => {\n      validateFields(event);\n    }\n  }, {\n    type: \"number\",\n    error: \"\",\n    required: true,\n    readOnly: false,\n    helperText: \"\",\n    label: \"Bet amount\",\n    id: \"betValue\",\n    name: \"betValue\",\n    onInput: event => {\n      validateFields(event);\n    }\n  }];\n\n  const handleSubmit = async () => {\n    if (isFormValid) {\n      try {\n        await bettingContract.methods.bet(id, formData.betSide.value).send({\n          from: accounts[0],\n          value: formData.betValue.value\n        });\n        setAlert({\n          toogled: true,\n          message: \"Your bet has been sent to the contract ! Have Game and may the odds be ever in your favor\",\n          type: \"success\"\n        });\n      } catch (error) {\n        setAlert({\n          toogled: true,\n          message: \"Your bet has been sent to the contract ! Have Game and may the odds be ever in your favor\",\n          type: \"error\"\n        }); // setAlertType(\"error\");\n        // setAlertMessage(\"We encoutered an unexpected error, please try again\");\n        // setAlertToogled(true);\n      }\n    } else {// setAlertType(\"error\");\n        // setAlertMessage(\"form is invalid, please fill the required inputs\");\n        // setAlertToogled(true);\n      }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Hidden, {\n        mdDown: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 4,\n        className: classes.containerFlex,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: matches ? clsx(classes.formContainer, classes.formContainerSm) : classes.formContainer,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            noValidate: true,\n            autoComplete: \"off\",\n            className: matches ? classes.form : clsx(classes.form, classes.formLg),\n            children: [/*#__PURE__*/_jsxDEV(ModalClosePanel, {\n              setModalToogled: setModalToogled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              component: \"h1\",\n              className: classes.title,\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this), fields.map(field => {\n              var _field$items;\n\n              return field.type === \"number\" ? /*#__PURE__*/_jsxDEV(TextField, {\n                id: field.id,\n                label: field.label.toUpperCase(),\n                variant: \"outlined\",\n                className: classes.textfield,\n                required: field.required,\n                readOnly: field.readOnly,\n                error: formData[field.id].error,\n                helperText: formData[field.id].helperText,\n                type: field.type,\n                value: formData[field.id].value,\n                onInput: field.onInput,\n                name: field.name\n              }, field.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this) : field.type === \"select\" && /*#__PURE__*/_jsxDEV(Select, {\n                labelId: field.labelId,\n                id: field.id,\n                name: field.name,\n                value: formData[field.id].value,\n                onChange: field.onChange,\n                className: classes.textfield,\n                error: formData[field.id].error,\n                children: (_field$items = field.items) === null || _field$items === void 0 ? void 0 : _field$items.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: item.id,\n                  children: item.name\n                }, `game-${item.id}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 21\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              className: classes.button,\n              size: \"large\",\n              onClick: handleSubmit,\n              disabled: !isFormValid,\n              children: buttonLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n        mdDown: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), alert.toogled && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(SnackBar, {\n      message: alert.message,\n      type: alert.type,\n      setAlert: setAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }, this), document.querySelector(\"body\"))]\n  }, void 0, true);\n};\n\n_s(BetForm, \"gstD7+B+910osPYWuTP212FCn54=\", false, function () {\n  return [useComponentState, useMediaQuery, useStyles];\n});\n\n_c = BetForm;\nexport default BetForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BetForm\");","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/BetForm/index.jsx"],"names":["React","useState","useEffect","ReactDOM","useComponentState","SnackBar","ModalClosePanel","useMediaQuery","clsx","Grid","makeStyles","TextField","Typography","Button","Hidden","MenuItem","Select","useStyles","root","containerFlex","display","flexDirection","justifyContent","alignItems","textfield","marginTop","marginBottom","width","button","formLg","borderRadius","form","backgroundColor","padding","minHeight","formContainer","formContainerSm","top","position","title","backPanel","backArrow","marginRight","cursor","BetForm","buttonLabel","setModalToogled","bettingContract","accounts","game","cover","description","ended","started","team1Name","team1Score","team2Name","team2Score","winner","id","alert","setAlert","matches","classes","isFormValid","setFormValid","formData","setFormData","betSide","value","helperText","error","betValue","validateFields","event","formIsValid","fields","map","field","target","name","newFormData","type","labelId","items","toUpperCase","onChange","required","readOnly","label","onInput","handleSubmit","methods","bet","send","from","toogled","message","item","createPortal","document","querySelector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useComponentState } from \"../../hooks\";\nimport SnackBar from \"../SnackBar.index\";\nimport ModalClosePanel from \"../ModalClosePanel/index\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport clsx from \"clsx\";\nimport {\n  Grid,\n  makeStyles,\n  TextField,\n  Typography,\n  Button,\n  Hidden,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  containerFlex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  textfield: {\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\",\n    width: \"100%\",\n  },\n  button: {\n    marginTop: \"1rem\",\n    width: \"100%\",\n  },\n  formLg: {\n    borderRadius: \"4px\",\n  },\n  form: {\n    backgroundColor: \"#FFF\",\n    padding: 24,\n    minHeight: \"100%\",\n  },\n  formContainer: {\n    width: \"100%\",\n  },\n  formContainerSm: {\n    minHeight: \"100%\",\n    top: \"4rem\",\n    position: \"relative\",\n  },\n  title: {\n    marginBottom: \"1rem\",\n  },\n  backPanel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  backArrow: {\n    marginBottom: 24,\n    marginRight: 8,\n    cursor: \"pointer\",\n  },\n}));\n\nconst BetForm = ({\n  title,\n  buttonLabel,\n  setModalToogled,\n  bettingContract,\n  accounts,\n  game: {\n    cover,\n    description,\n    ended,\n    started,\n    team1Name,\n    team1Score,\n    team2Name,\n    team2Score,\n    winner,\n    id,\n  },\n}) => {\n  const { alert, setAlert } = useComponentState();\n  const matches = useMediaQuery(\"(max-width:600px)\");\n  const classes = useStyles();\n  const [isFormValid, setFormValid] = useState(false);\n  const [formData, setFormData] = useState({\n    betSide: {\n      value: \"\",\n      helperText: \"\",\n      error: false,\n    },\n    betValue: {\n      value: \"\",\n      error: false,\n    },\n  });\n  const validateFields = (event) => {\n    let formIsValid = true;\n    fields.map((field) => {\n      if (event.target.name === field.name) {\n        const newFormData = {\n          ...formData,\n          [field.name]: {\n            value: event.target.value,\n            error: event.target.value === \"\",\n            helperText: \"Required\",\n          },\n        };\n        setFormData(newFormData);\n        formIsValid = event.target.value === \"\" ? false : formIsValid;\n      }\n    });\n    setFormValid(formIsValid);\n  };\n\n  const fields = [\n    {\n      type: \"select\",\n      labelId: \"Choose your side\",\n      id: \"betSide\",\n      name: \"betSide\",\n      value: \"\",\n      items: [\n        { id: 1, name: team1Name?.toUpperCase() },\n        { id: 0, name: \"NULL\" },\n        { id: 2, name: team2Name?.toUpperCase() },\n      ],\n      onChange: (event) => {\n        validateFields(event);\n      },\n    },\n    {\n      type: \"number\",\n      error: \"\",\n      required: true,\n      readOnly: false,\n      helperText: \"\",\n      label: \"Bet amount\",\n      id: \"betValue\",\n      name: \"betValue\",\n      onInput: (event) => {\n        validateFields(event);\n      },\n    },\n  ];\n\n  const handleSubmit = async () => {\n    if (isFormValid) {\n      try {\n        await bettingContract.methods\n          .bet(id, formData.betSide.value)\n          .send({ from: accounts[0], value: formData.betValue.value });\n        setAlert({\n          toogled: true,\n          message:\n            \"Your bet has been sent to the contract ! Have Game and may the odds be ever in your favor\",\n          type: \"success\",\n        });\n      } catch (error) {\n        setAlert({\n          toogled: true,\n          message:\n            \"Your bet has been sent to the contract ! Have Game and may the odds be ever in your favor\",\n          type: \"error\",\n        });\n        // setAlertType(\"error\");\n        // setAlertMessage(\"We encoutered an unexpected error, please try again\");\n        // setAlertToogled(true);\n      }\n    } else {\n      // setAlertType(\"error\");\n      // setAlertMessage(\"form is invalid, please fill the required inputs\");\n      // setAlertToogled(true);\n    }\n  };\n\n  return (\n    <>\n      <Grid container className={classes.root}>\n        <Hidden mdDown>\n          <Grid item lg={4}></Grid>\n        </Hidden>\n        <Grid item xs={12} lg={4} className={classes.containerFlex}>\n          <div\n            className={\n              matches\n                ? clsx(classes.formContainer, classes.formContainerSm)\n                : classes.formContainer\n            }\n          >\n            <form\n              noValidate\n              autoComplete=\"off\"\n              className={\n                matches ? classes.form : clsx(classes.form, classes.formLg)\n              }\n            >\n              <ModalClosePanel setModalToogled={setModalToogled} />\n              <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\n                {title}\n              </Typography>\n              {fields.map((field) =>\n                field.type === \"number\" ? (\n                  <TextField\n                    key={field.id}\n                    id={field.id}\n                    label={field.label.toUpperCase()}\n                    variant=\"outlined\"\n                    className={classes.textfield}\n                    required={field.required}\n                    readOnly={field.readOnly}\n                    error={formData[field.id].error}\n                    helperText={formData[field.id].helperText}\n                    type={field.type}\n                    value={formData[field.id].value}\n                    onInput={field.onInput}\n                    name={field.name}\n                  />\n                ) : (\n                  field.type === \"select\" && (\n                    <Select\n                      labelId={field.labelId}\n                      id={field.id}\n                      name={field.name}\n                      value={formData[field.id].value}\n                      onChange={field.onChange}\n                      className={classes.textfield}\n                      error={formData[field.id].error}\n                    >\n                      {field.items?.map((item) => (\n                        <MenuItem key={`game-${item.id}`} value={item.id}>\n                          {item.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  )\n                )\n              )}\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                className={classes.button}\n                size=\"large\"\n                onClick={handleSubmit}\n                disabled={!isFormValid}\n              >\n                {buttonLabel}\n              </Button>\n            </form>\n          </div>\n        </Grid>\n\n        <Hidden mdDown>\n          <Grid item lg={4}></Grid>\n        </Hidden>\n      </Grid>\n\n      {alert.toogled &&\n        ReactDOM.createPortal(\n          <SnackBar\n            message={alert.message}\n            type={alert.type}\n            setAlert={setAlert}\n          />,\n          document.querySelector(\"body\")\n        )}\n    </>\n  );\n};\n\nexport default BetForm;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/BetForm/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { server_root_path } from \"../../config/index.json\";\nimport { useComponentState } from \"../../hooks\";\nimport SnackBar from \"../SnackBar.index\";\nimport ModalClosePanel from \"../ModalClosePanel/index\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport clsx from \"clsx\";\nimport { Grid, makeStyles, TextField, Typography, Button, Hidden, MenuItem, Select, InputLabel, FormControl } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {},\n  containerFlex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  textfield: {\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\",\n    width: \"100%\"\n  },\n  button: {\n    marginTop: \"1rem\",\n    width: \"100%\"\n  },\n  formLg: {\n    borderRadius: \"4px\"\n  },\n  form: {\n    padding: 24,\n    minHeight: \"100%\"\n  },\n  formContainer: {\n    width: \"100%\",\n    backgroundColor: \"#FFF\"\n  },\n  formContainerSm: {\n    minHeight: \"100%\",\n    top: \"4rem\",\n    position: \"relative\"\n  },\n  title: {\n    marginBottom: \"1rem\"\n  },\n  backPanel: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  backArrow: {\n    marginBottom: 24,\n    marginRight: 8,\n    cursor: \"pointer\"\n  },\n  media: {\n    width: \"100%\"\n  },\n  formControl: {\n    width: \"100%\"\n  },\n  formLabel: {\n    padding: \"1rem\"\n  }\n}));\n\nconst BetForm = ({\n  title,\n  buttonLabel,\n  setModalToogled,\n  bettingContract,\n  accounts,\n  game: {\n    cover,\n    description,\n    ended,\n    started,\n    team1Name,\n    team1Score,\n    team2Name,\n    team2Score,\n    winner,\n    id\n  }\n}) => {\n  _s();\n\n  const {\n    alert,\n    setAlert\n  } = useComponentState();\n  const matches = useMediaQuery(\"(max-width:600px)\");\n  const classes = useStyles();\n  const [formData, setFormData] = useState({\n    betSide: {\n      value: \"\",\n      helperText: \"\",\n      error: false\n    },\n    betValue: {\n      value: \"\",\n      error: false\n    },\n    isValid: false\n  });\n\n  const validateFields = event => {\n    fields.map(field => {\n      if (event.target.name === field.name) {\n        const newFormData = { ...formData,\n          [field.name]: {\n            value: event.target.value,\n            error: event.target.value === \"\",\n            helperText: \"Required\"\n          }\n        };\n        let formIsValid = true;\n\n        for (const key in newFormData) {\n          if (newFormData[key].value === \"\") {\n            formIsValid = false;\n          }\n        }\n\n        setFormData({ ...newFormData,\n          isValid: formIsValid\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    setAlert({\n      toogled: true,\n      message: \"Please fill out the form to place your bet\",\n      type: \"info\"\n    });\n  }, []);\n  const fields = [{\n    label: \"choose your side\",\n    type: \"select\",\n    labelId: \"Choose your side\",\n    id: \"betSide\",\n    name: \"betSide\",\n    value: \"\",\n    items: [{\n      id: 2,\n      name: team1Name === null || team1Name === void 0 ? void 0 : team1Name.toUpperCase(),\n      disabled: false\n    }, {\n      id: 3,\n      name: \"NULL\",\n      disabled: false\n    }, {\n      id: 4,\n      name: team2Name === null || team2Name === void 0 ? void 0 : team2Name.toUpperCase(),\n      disabled: false\n    }],\n    onChange: event => {\n      validateFields(event);\n    },\n    required: true\n  }, {\n    type: \"number\",\n    error: \"\",\n    required: true,\n    readOnly: false,\n    helperText: \"\",\n    label: \"Bet amount\",\n    id: \"betValue\",\n    name: \"betValue\",\n    onInput: event => {\n      validateFields(event);\n    }\n  }];\n\n  const handleSubmit = async () => {\n    if (formData.isValid) {\n      try {\n        await bettingContract.methods.bet(id, formData.betSide.value).send({\n          from: accounts[0],\n          value: formData.betValue.value\n        });\n        setAlert({\n          toogled: true,\n          message: \"Your bet has been sent to the contract ! Have Game and may the odds be ever in your favor\",\n          type: \"success\"\n        });\n      } catch (error) {\n        setAlert({\n          toogled: true,\n          message: \"We encoutered an unexpected error, please try again\",\n          type: \"error\"\n        });\n      }\n    } else {\n      setAlert({\n        toogled: true,\n        message: \"form is invalid, please fill the required inputs\",\n        type: \"error\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Hidden, {\n        mdDown: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 4,\n        className: classes.containerFlex,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: matches ? clsx(classes.formContainer, classes.formContainerSm) : classes.formContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: server_root_path + cover,\n            alt: \"\",\n            className: classes.media\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            noValidate: true,\n            autoComplete: \"off\",\n            className: matches ? classes.form : clsx(classes.form, classes.formLg),\n            children: [/*#__PURE__*/_jsxDEV(ModalClosePanel, {\n              setModalToogled: setModalToogled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              component: \"h1\",\n              className: classes.title,\n              children: [title, team1Name === null || team1Name === void 0 ? void 0 : team1Name.toUpperCase(), \" vs \", team2Name === null || team2Name === void 0 ? void 0 : team2Name.toUpperCase()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), fields.map(field => {\n              var _field$items;\n\n              return field.type === \"number\" ? /*#__PURE__*/_jsxDEV(FormControl, {\n                variant: \"outlined\",\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  className: classes.formLabel,\n                  id: field.labelId,\n                  children: field.label.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  id: field.id,\n                  variant: \"outlined\",\n                  className: classes.textfield,\n                  required: field.required,\n                  readOnly: field.readOnly,\n                  error: formData[field.id].error,\n                  helperText: formData[field.id].helperText,\n                  type: field.type,\n                  value: formData[field.id].value,\n                  onInput: field.onInput,\n                  name: field.name\n                }, field.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this) : field.type === \"select\" && /*#__PURE__*/_jsxDEV(FormControl, {\n                variant: \"outlined\",\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: field.labelId,\n                  children: field.label.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: field.labelId,\n                  id: field.id,\n                  name: field.name,\n                  value: formData[field.id].value,\n                  onChange: field.onChange,\n                  className: classes.textfield,\n                  error: formData[field.id].error,\n                  children: (_field$items = field.items) === null || _field$items === void 0 ? void 0 : _field$items.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: item.id,\n                    disabled: item.disabled,\n                    children: item.name\n                  }, item.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 27\n                  }, this))\n                }, field.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 21\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              className: classes.button,\n              size: \"large\",\n              onClick: handleSubmit,\n              disabled: !formData.isValid,\n              children: buttonLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n        mdDown: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), alert.toogled && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(SnackBar, {\n      message: alert.message,\n      type: alert.type,\n      setAlert: setAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 11\n    }, this), document.querySelector(\"body\"))]\n  }, void 0, true);\n};\n\n_s(BetForm, \"4Dcm/MdD6wyV/s0UVdgtwLzxrE8=\", false, function () {\n  return [useComponentState, useMediaQuery, useStyles];\n});\n\n_c = BetForm;\nexport default BetForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BetForm\");","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/components/BetForm/index.jsx"],"names":["React","useState","useEffect","ReactDOM","server_root_path","useComponentState","SnackBar","ModalClosePanel","useMediaQuery","clsx","Grid","makeStyles","TextField","Typography","Button","Hidden","MenuItem","Select","InputLabel","FormControl","useStyles","root","containerFlex","display","flexDirection","justifyContent","alignItems","textfield","marginTop","marginBottom","width","button","formLg","borderRadius","form","padding","minHeight","formContainer","backgroundColor","formContainerSm","top","position","title","backPanel","backArrow","marginRight","cursor","media","formControl","formLabel","BetForm","buttonLabel","setModalToogled","bettingContract","accounts","game","cover","description","ended","started","team1Name","team1Score","team2Name","team2Score","winner","id","alert","setAlert","matches","classes","formData","setFormData","betSide","value","helperText","error","betValue","isValid","validateFields","event","fields","map","field","target","name","newFormData","formIsValid","key","toogled","message","type","label","labelId","items","toUpperCase","disabled","onChange","required","readOnly","onInput","handleSubmit","methods","bet","send","from","item","createPortal","document","querySelector"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {server_root_path} from \"../../config/index.json\"\nimport { useComponentState } from \"../../hooks\";\nimport SnackBar from \"../SnackBar.index\";\nimport ModalClosePanel from \"../ModalClosePanel/index\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport clsx from \"clsx\";\nimport {\n  Grid,\n  makeStyles,\n  TextField,\n  Typography,\n  Button,\n  Hidden,\n  MenuItem,\n  Select,\n  InputLabel,\n  FormControl,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  containerFlex: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  textfield: {\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\",\n    width: \"100%\",\n  },\n  button: {\n    marginTop: \"1rem\",\n    width: \"100%\",\n  },\n  formLg: {\n    borderRadius: \"4px\",\n  },\n  form: {\n    padding: 24,\n    minHeight: \"100%\",\n  },\n  formContainer: {\n    width: \"100%\",\n    backgroundColor: \"#FFF\",\n  },\n  formContainerSm: {\n    minHeight: \"100%\",\n    top: \"4rem\",\n    position: \"relative\",\n  },\n  title: {\n    marginBottom: \"1rem\",\n  },\n  backPanel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  backArrow: {\n    marginBottom: 24,\n    marginRight: 8,\n    cursor: \"pointer\",\n  },\n  media: {\n    width: \"100%\",\n  },\n  formControl: {\n    width: \"100%\",\n  },\n  formLabel: {\n    padding: \"1rem\"\n  }\n}));\n\nconst BetForm = ({\n  title,\n  buttonLabel,\n  setModalToogled,\n  bettingContract,\n  accounts,\n  game: {\n    cover,\n    description,\n    ended,\n    started,\n    team1Name,\n    team1Score,\n    team2Name,\n    team2Score,\n    winner,\n    id,\n  },\n}) => {\n  const { alert, setAlert } = useComponentState();\n  const matches = useMediaQuery(\"(max-width:600px)\");\n  const classes = useStyles();\n  const [formData, setFormData] = useState({\n    betSide: {\n      value: \"\",\n      helperText: \"\",\n      error: false,\n    },\n    betValue: {\n      value: \"\",\n      error: false,\n    },\n    isValid: false,\n  });\n  const validateFields = (event) => {\n    fields.map((field) => {\n      if (event.target.name === field.name) {\n        const newFormData = {\n          ...formData,\n          [field.name]: {\n            value: event.target.value,\n            error: event.target.value === \"\",\n            helperText: \"Required\",\n          },\n        };\n        let formIsValid = true;\n        for (const key in newFormData) {\n          if (newFormData[key].value === \"\") {\n            formIsValid = false;\n          }\n        }\n        setFormData({ ...newFormData, isValid: formIsValid });\n      }\n    });\n  };\n\n  useEffect(() => {\n    setAlert({\n      toogled: true,\n      message: \"Please fill out the form to place your bet\",\n      type: \"info\",\n    });\n  }, []);\n\n  const fields = [\n    {\n      label: \"choose your side\",\n      type: \"select\",\n      labelId: \"Choose your side\",\n      id: \"betSide\",\n      name: \"betSide\",\n      value: \"\",\n      items: [\n        { id: 2, name: team1Name?.toUpperCase(), disabled: false },\n        { id: 3, name: \"NULL\", disabled: false },\n        { id: 4, name: team2Name?.toUpperCase(), disabled: false },\n      ],\n      onChange: (event) => {\n        validateFields(event);\n      },\n      required: true,\n    },\n    {\n      type: \"number\",\n      error: \"\",\n      required: true,\n      readOnly: false,\n      helperText: \"\",\n      label: \"Bet amount\",\n      id: \"betValue\",\n      name: \"betValue\",\n      onInput: (event) => {\n        validateFields(event);\n      },\n    },\n  ];\n\n  const handleSubmit = async () => {\n    if (formData.isValid) {\n      try {\n        await bettingContract.methods\n          .bet(id, formData.betSide.value)\n          .send({ from: accounts[0], value: formData.betValue.value });\n        setAlert({\n          toogled: true,\n          message:\n            \"Your bet has been sent to the contract ! Have Game and may the odds be ever in your favor\",\n          type: \"success\",\n        });\n      } catch (error) {\n        setAlert({\n          toogled: true,\n          message: \"We encoutered an unexpected error, please try again\",\n          type: \"error\",\n        });\n      }\n    } else {\n      setAlert({\n        toogled: true,\n        message: \"form is invalid, please fill the required inputs\",\n        type: \"error\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Grid container className={classes.root}>\n        <Hidden mdDown>\n          <Grid item lg={4}></Grid>\n        </Hidden>\n        <Grid item xs={12} lg={4} className={classes.containerFlex}>\n          <div\n            className={\n              matches\n                ? clsx(classes.formContainer, classes.formContainerSm)\n                : classes.formContainer\n            }\n          >\n            <img\n              src={server_root_path+ cover}\n              alt=\"\"\n              className={classes.media}\n            />\n            <form\n              noValidate\n              autoComplete=\"off\"\n              className={\n                matches ? classes.form : clsx(classes.form, classes.formLg)\n              }\n            >\n              <ModalClosePanel setModalToogled={setModalToogled} />\n              <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\n                {title}{team1Name?.toUpperCase()} vs {team2Name?.toUpperCase()}\n              </Typography>\n              {fields.map((field) =>\n                field.type === \"number\" ? (\n                  <FormControl\n                    variant=\"outlined\"\n                    className={classes.formControl}\n                  >\n                    <InputLabel className={classes.formLabel} id={field.labelId}>{field.label.toUpperCase()}</InputLabel>\n                    <TextField\n                      key={field.id}\n                      id={field.id}\n                      variant=\"outlined\"\n                      className={classes.textfield}\n                      required={field.required}\n                      readOnly={field.readOnly}\n                      error={formData[field.id].error}\n                      helperText={formData[field.id].helperText}\n                      type={field.type}\n                      value={formData[field.id].value}\n                      onInput={field.onInput}\n                      name={field.name}\n                    />\n                  </FormControl>\n                ) : (\n                  field.type === \"select\" && (\n                    <FormControl\n                      variant=\"outlined\"\n                      className={classes.formControl}\n                    >\n                      <InputLabel id={field.labelId}>{field.label.toUpperCase()}</InputLabel>\n                      <Select\n                        key={field.id}\n                        labelId={field.labelId}\n                        id={field.id}\n                        name={field.name}\n                        value={formData[field.id].value}\n                        onChange={field.onChange}\n                        className={classes.textfield}\n                        error={formData[field.id].error}\n                      >\n                        {field.items?.map((item) => (\n                          <MenuItem\n                            key={`game-${item.id}`}\n                            key={item.id}\n                            value={item.id}\n                            disabled={item.disabled}\n                          >\n                            {item.name}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  )\n                )\n              )}\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                className={classes.button}\n                size=\"large\"\n                onClick={handleSubmit}\n                disabled={!formData.isValid}\n              >\n                {buttonLabel}\n              </Button>\n            </form>\n          </div>\n        </Grid>\n\n        <Hidden mdDown>\n          <Grid item lg={4}></Grid>\n        </Hidden>\n      </Grid>\n\n      {alert.toogled &&\n        ReactDOM.createPortal(\n          <SnackBar\n            message={alert.message}\n            type={alert.type}\n            setAlert={setAlert}\n          />,\n          document.querySelector(\"body\")\n        )}\n    </>\n  );\n};\n\nexport default BetForm;\n"]},"metadata":{},"sourceType":"module"}
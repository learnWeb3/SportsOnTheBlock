{"ast":null,"code":"var _jsxFileName = \"/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/pages/Dashboard/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../../config/index\";\nimport { useComponentState, useProvider } from \"../../hooks\";\nimport { BettingContract } from \"../../services/Contract\";\nimport { Container, makeStyles } from \"@material-ui/core\";\nimport GameCard from \"../../components/GameCard\";\nimport FiltersArea from \"../../components/FiltersArea\";\nimport MainMetrics from \"../../components/MainMetrics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  gradient: {\n    backgroundImage: \"linear-gradient(315deg, #ffffff 0%, #d7e1ec 74%)\",\n    top: \"4rem\",\n    position: \"relative\",\n    minHeight: \"100vh\"\n  }\n}));\n\nconst Dashboard = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    state,\n    setState,\n    Error,\n    LoadingAnimation\n  } = useComponentState();\n  const {\n    provider,\n    setProvider,\n    accounts,\n    setAccounts\n  } = useProvider();\n  const [bettingContract, setBettingContract] = useState(null);\n  const [competition, setCompetition] = useState(null);\n  const [competitions, setCompetitions] = useState(null);\n  const [games, setGames] = useState(null);\n  useEffect(() => {\n    const fetchAndSetBettingContract = async (provider, accounts) => {\n      try {\n        const _bettingContract = new BettingContract(provider, config.initial_contract_address, accounts);\n\n        setBettingContract(_bettingContract.contract);\n\n        const _competitions = await _bettingContract.contract.methods.getCompetitions().call();\n\n        const formattedCompetitions = _competitions.map(({\n          available,\n          cover,\n          description,\n          name\n        }, index) => ({\n          name,\n          cover,\n          description,\n          available,\n          id: index + 1\n        }));\n\n        setCompetitions(formattedCompetitions);\n        setCompetition(formattedCompetitions[0]);\n      } catch (error) {\n        setState({\n          status: \"error\",\n          code: 500\n        });\n      }\n    };\n\n    if (provider && accounts) {\n      fetchAndSetBettingContract(provider, accounts);\n    }\n  }, [provider, accounts]);\n  useEffect(() => {\n    const getAndSetGames = async () => {\n      const _games = await bettingContract.methods.getGames(competition.id).call();\n\n      const formattedGames = _games.map(({\n        cover,\n        description,\n        ended,\n        started,\n        team1Name,\n        team1Score,\n        team2Name,\n        team2Score,\n        winner\n      }, index) => ({\n        description,\n        ended,\n        started,\n        team1Name,\n        team1Score,\n        team2Name,\n        team2Score,\n        winner,\n        id: index + 1\n      }));\n\n      setGames(formattedGames);\n    };\n\n    if (competitions && competition) {\n      getAndSetGames();\n    }\n  }, [competitions, competition, bettingContract]);\n  if (state.status === \"loading\") return /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 42\n  }, this);else if (state.status === \"loaded\") return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.gradient,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(MainMetrics, {\n        userCount: 10,\n        totalFunds: 5,\n        competitionCount: 9,\n        gameCount: 18,\n        avgGamePerCompetition: 9,\n        transactionCount: 200,\n        avgTransactionCountPerAddress: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FiltersArea, {\n        competition: competition,\n        competitions: competitions,\n        setCompetition: selectedCompetition => setCompetition(selectedCompetition)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), games === null || games === void 0 ? void 0 : games.map(game => /*#__PURE__*/_jsxDEV(GameCard, {\n        competition: competition,\n        provider: provider,\n        accounts: accounts,\n        game: game\n      }, game.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 7\n  }, this);else {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      code: state.code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(Dashboard, \"IEjTtb2ryP/xKKUC0L4TwmS5Btc=\", false, function () {\n  return [useStyles, useComponentState, useProvider];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/pages/Dashboard/index.jsx"],"names":["React","useState","useEffect","config","useComponentState","useProvider","BettingContract","Container","makeStyles","GameCard","FiltersArea","MainMetrics","useStyles","gradient","backgroundImage","top","position","minHeight","Dashboard","classes","state","setState","Error","LoadingAnimation","provider","setProvider","accounts","setAccounts","bettingContract","setBettingContract","competition","setCompetition","competitions","setCompetitions","games","setGames","fetchAndSetBettingContract","_bettingContract","initial_contract_address","contract","_competitions","methods","getCompetitions","call","formattedCompetitions","map","available","cover","description","name","index","id","error","status","code","getAndSetGames","_games","getGames","formattedGames","ended","started","team1Name","team1Score","team2Name","team2Score","winner","selectedCompetition","game"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport config from \"../../config/index\";\nimport { useComponentState, useProvider } from \"../../hooks\";\nimport { BettingContract } from \"../../services/Contract\";\nimport { Container, makeStyles } from \"@material-ui/core\";\nimport GameCard from \"../../components/GameCard\";\nimport FiltersArea from \"../../components/FiltersArea\";\nimport MainMetrics from \"../../components/MainMetrics\";\n\nconst useStyles = makeStyles(() => ({\n  gradient: {\n    backgroundImage: \"linear-gradient(315deg, #ffffff 0%, #d7e1ec 74%)\",\n    top: \"4rem\",\n    position: \"relative\",\n    minHeight: \"100vh\",\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const { state, setState, Error, LoadingAnimation } = useComponentState();\n  const { provider, setProvider, accounts, setAccounts } = useProvider();\n  const [bettingContract, setBettingContract] = useState(null);\n  const [competition, setCompetition] = useState(null);\n  const [competitions, setCompetitions] = useState(null);\n  const [games, setGames] = useState(null);\n  useEffect(() => {\n    const fetchAndSetBettingContract = async (provider, accounts) => {\n      try {\n        const _bettingContract = new BettingContract(\n          provider,\n          config.initial_contract_address,\n          accounts\n        );\n        setBettingContract(_bettingContract.contract);\n        const _competitions = await _bettingContract.contract.methods\n          .getCompetitions()\n          .call();\n        const formattedCompetitions = _competitions.map(\n          ({ available, cover, description, name }, index) => ({\n            name,\n            cover,\n            description,\n            available,\n            id: index + 1,\n          })\n        );\n        setCompetitions(formattedCompetitions);\n        setCompetition(formattedCompetitions[0]);\n      } catch (error) {\n        setState({ status: \"error\", code: 500 });\n      }\n    };\n\n    if (provider && accounts) {\n      fetchAndSetBettingContract(provider, accounts);\n    }\n  }, [provider, accounts]);\n\n  useEffect(() => {\n    const getAndSetGames = async () => {\n      const _games = await bettingContract.methods\n        .getGames(competition.id)\n        .call();\n      const formattedGames = _games.map(\n        (\n          {\n            cover,\n            description,\n            ended,\n            started,\n            team1Name,\n            team1Score,\n            team2Name,\n            team2Score,\n            winner,\n          },\n          index\n        ) => ({\n          description,\n          ended,\n          started,\n          team1Name,\n          team1Score,\n          team2Name,\n          team2Score,\n          winner,\n          id: index + 1,\n        })\n      );\n      setGames(formattedGames);\n    };\n    if (competitions && competition) {\n      getAndSetGames();\n    }\n  }, [competitions, competition, bettingContract]);\n\n  if (state.status === \"loading\") return <LoadingAnimation />;\n  else if (state.status === \"loaded\")\n    return (\n      <div className={classes.gradient}>\n        <Container maxWidth=\"lg\">\n          <MainMetrics\n            userCount={10}\n            totalFunds={5}\n            competitionCount={9}\n            gameCount={18}\n            avgGamePerCompetition={9}\n            transactionCount={200}\n            avgTransactionCountPerAddress={3}\n          />\n          <FiltersArea\n            competition={competition}\n            competitions={competitions}\n            setCompetition={(selectedCompetition) =>\n              setCompetition(selectedCompetition)\n            }\n          />\n          {games?.map((game) => (\n            <GameCard\n              key={game.id}\n              competition={competition}\n              provider={provider}\n              accounts={accounts}\n              game={game}\n            />\n          ))}\n        </Container>\n      </div>\n    );\n  else {\n    return <Error code={state.code} />;\n  }\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
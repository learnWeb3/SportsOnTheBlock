{"ast":null,"code":"var _jsxFileName = \"/home/neurotropik/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/hoc/ComponentState/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport LoadingAnimation from \"../../components/LoadingAnimation/index\";\nimport Error from \"../../components/Error/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ComponentState = ({\n  component: Component,\n  ...props\n}) => {\n  _s();\n\n  const [provider, setProvider] = useState();\n  const [state, setState] = useState({\n    status: \"loaded\",\n    code: null\n  });\n  useEffect(() => {\n    const getAndSetProvider = async () => {\n      if (process.env == \"developement\") {\n        setProvider(new Web3(\"http://localhost:8545\"));\n      } else {\n        const provider = await detectEthereumProvider();\n\n        if (provider) {\n          setProvider(provider);\n        } else {\n          setState({\n            status: \"error\",\n            code: 499\n          });\n        }\n      }\n    };\n\n    getAndSetProvider();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      competition: competition,\n      setCompetition: selectedCompetition => setCompetition(selectedCompetition),\n      competitions: competitions,\n      menuRightDisplayed: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(ComponentState, \"K5ruxpx3mRM2TdGprmLR2s05t9I=\");\n\n_c = ComponentState;\nexport default ComponentState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponentState\");","map":{"version":3,"sources":["/home/neurotropik/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/hoc/ComponentState/index.jsx"],"names":["React","useEffect","useState","Web3","detectEthereumProvider","LoadingAnimation","Error","ComponentState","component","Component","props","provider","setProvider","state","setState","status","code","getAndSetProvider","process","env","competition","selectedCompetition","setCompetition","competitions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;AACA,OAAOC,KAAP,MAAkB,8BAAlB;;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAwC;AAAA;;AAC7D,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,EAAxC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC;AACjCa,IAAAA,MAAM,EAAE,QADyB;AAEjCC,IAAAA,IAAI,EAAE;AAF2B,GAAD,CAAlC;AAKAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,iBAAiB,GAAG,YAAY;AACpC,UAAIC,OAAO,CAACC,GAAR,IAAe,cAAnB,EAAmC;AACjCP,QAAAA,WAAW,CAAC,IAAIT,IAAJ,CAAS,uBAAT,CAAD,CAAX;AACD,OAFD,MAEO;AACL,cAAMQ,QAAQ,GAAG,MAAMP,sBAAsB,EAA7C;;AACA,YAAIO,QAAJ,EAAc;AACZC,UAAAA,WAAW,CAACD,QAAD,CAAX;AACD,SAFD,MAEO;AACLG,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,MAAM,EAAE,OAAV;AAAmBC,YAAAA,IAAI,EAAE;AAAzB,WAAD,CAAR;AACD;AACF;AACF,KAXD;;AAaAC,IAAAA,iBAAiB;AAClB,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACI;AAAA,2BACF,QAAC,MAAD;AACA,MAAA,WAAW,EAAEG,WADb;AAEA,MAAA,cAAc,EAAGC,mBAAD,IACdC,cAAc,CAACD,mBAAD,CAHhB;AAKA,MAAA,YAAY,EAAEE,YALd;AAMA,MAAA,kBAAkB,EAAE;AANpB;AAAA;AAAA;AAAA;AAAA;AADE,mBADJ;AAiBD,CAzCD;;GAAMhB,c;;KAAAA,c;AA2CN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport LoadingAnimation from \"../../components/LoadingAnimation/index\";\nimport Error from \"../../components/Error/index\";\n\nconst ComponentState = ({ component: Component, ...props }) => {\n  const [provider, setProvider] = useState();\n  const [state, setState] = useState({\n    status: \"loaded\",\n    code: null,\n  });\n\n  useEffect(() => {\n    const getAndSetProvider = async () => {\n      if (process.env == \"developement\") {\n        setProvider(new Web3(\"http://localhost:8545\"));\n      } else {\n        const provider = await detectEthereumProvider();\n        if (provider) {\n          setProvider(provider);\n        } else {\n          setState({ status: \"error\", code: 499 });\n        }\n      }\n    };\n\n    getAndSetProvider();\n  }, []);\n\n  return (\n      <>\n    <Navbar\n    competition={competition}\n    setCompetition={(selectedCompetition) =>\n      setCompetition(selectedCompetition)\n    }\n    competitions={competitions}\n    menuRightDisplayed={false}\n  />\n\n\n  </>\n\n\n  )\n\n};\n\nexport default ComponentState;\n"]},"metadata":{},"sourceType":"module"}
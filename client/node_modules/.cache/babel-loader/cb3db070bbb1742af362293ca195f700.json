{"ast":null,"code":"var _jsxFileName = \"/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/pages/Dashboard/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../../config/index\";\nimport { useComponentState, useProvider } from \"../../hooks\";\nimport { BettingContract } from \"../../services/Contract\";\nimport { Container, makeStyles, Grid } from \"@material-ui/core\";\nimport GameCard from \"../../components/GameCard\";\nimport FiltersArea from \"../../components/FiltersArea\";\nimport MainMetrics from \"../../components/MainMetrics\";\nimport { unique } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  gradient: {\n    backgroundImage: \"linear-gradient(315deg, #ffffff 0%, #d7e1ec 74%)\",\n    top: \"4rem\",\n    position: \"relative\",\n    minHeight: \"100vh\"\n  },\n  gameContainer: {\n    paddingTop: 16\n  }\n}));\n\nconst Dashboard = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    state,\n    setState,\n    Error,\n    LoadingAnimation\n  } = useComponentState();\n  const {\n    provider,\n\n    /*setProvider,*/\n    accounts\n    /*setAccounts*/\n\n  } = useProvider();\n  const [bettingContract, setBettingContract] = useState(null);\n  const [competition, setCompetition] = useState(null);\n  const [competitions, setCompetitions] = useState(null);\n  const [games, setGames] = useState(null);\n  const [isFilterGameToActive, setFilterGameToActive] = useState(true);\n  const [mainMetrics, setMainMetrics] = useState(null);\n  useEffect(() => {\n    const fetchAndSetBettingContract = async (provider, accounts) => {\n      try {\n        const _bettingContract = new BettingContract(provider, config.initial_contract_address, accounts);\n\n        setBettingContract(_bettingContract.contract);\n\n        const _competitions = await _bettingContract.contract.methods.getCompetitions().call();\n\n        const formattedCompetitions = _competitions.map(({\n          available,\n          cover,\n          description,\n          name\n        }, index) => ({\n          name,\n          cover,\n          description,\n          available,\n          id: index + 1\n        }));\n\n        setCompetitions(formattedCompetitions);\n        setCompetition(formattedCompetitions[0]);\n      } catch (error) {\n        setState({\n          status: \"error\",\n          code: 500\n        });\n      }\n    };\n\n    if (provider && accounts) {\n      fetchAndSetBettingContract(provider, accounts);\n    }\n  }, [provider, accounts]);\n  useEffect(() => {\n    const getAndSetGames = async () => {\n      const _games = await bettingContract.methods.getGames(competition.id).call();\n\n      const formattedGames = _games.map(({\n        cover,\n        description,\n        ended,\n        started,\n        team1Name,\n        team1Score,\n        team2Name,\n        team2Score,\n        winner,\n        start\n      }, index) => ({\n        cover,\n        description,\n        ended,\n        started,\n        team1Name,\n        team1Score,\n        team2Name,\n        team2Score,\n        winner,\n        start,\n        id: index + 1\n      }));\n\n      const _bets = await Promise.all(formattedGames.map(async game => {\n        let bets = await bettingContract.methods.getBets(game.id).call();\n        bets = bets.map(({\n          amount,\n          outcome,\n          user\n        }) => ({\n          amount,\n          outcome,\n          user\n        }));\n        let uniqueUsers = unique(bets.map(bet => bet.user));\n        let betsValue = bets.reduce((prev, next) => prev + parseInt(next.amount), 0);\n        return {\n          gameId: game.id,\n          bets,\n          betsCount: bets.length,\n          betsValue,\n          uniqueUsers,\n          uniqueUserCount: uniqueUsers.length\n        };\n      }));\n\n      const getStats = (_bets, bettingContract, formattedGames, competitions) => {\n        let transactionCount, uniqueAddressCount, avgTransactionCountPerAddress, avgGamePerCompetition, totalFunds, gamesCount, competitionCount;\n        transactionCount = _bets.reduce((prev, next) => prev + next.bets.length, 0);\n        uniqueAddressCount = unique(_bets.map(game => game.uniqueUsers)).length;\n        avgTransactionCountPerAddress = Math.ceil(transactionCount / uniqueAddressCount);\n        avgGamePerCompetition = Math.ceil(formattedGames.length / competitions.length);\n        totalFunds = bettingContract.utils.fromWei(`${_bets.reduce((prev, next) => prev + next.betsValue, 0)}`).slice(0, 4);\n        gamesCount = formattedGames.length;\n        competitionCount = competitions.length;\n        return {\n          transactionCount,\n          uniqueAddressCount,\n          avgTransactionCountPerAddress,\n          avgGamePerCompetition,\n          totalFunds,\n          gamesCount,\n          competitionCount\n        };\n      };\n\n      setMainMetrics(getStats(_bets, bettingContract, formattedGames, competitions));\n      setGames(formattedGames.filter(game => game.ended !== isFilterGameToActive));\n    };\n\n    if (competitions && competition) {\n      getAndSetGames();\n    }\n  }, [competitions, competition, bettingContract, isFilterGameToActive]);\n  if (state.status === \"loading\") return /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 42\n  }, this);else if (state.status === \"loaded\") return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.gradient,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(MainMetrics, {\n            userCount: mainMetrics === null || mainMetrics === void 0 ? void 0 : mainMetrics.uniqueAddressCount,\n            totalFunds: mainMetrics === null || mainMetrics === void 0 ? void 0 : mainMetrics.totalFunds,\n            competitionCount: mainMetrics === null || mainMetrics === void 0 ? void 0 : mainMetrics.competitionCount,\n            gameCount: mainMetrics === null || mainMetrics === void 0 ? void 0 : mainMetrics.gamesCount,\n            avgGamePerCompetition: mainMetrics === null || mainMetrics === void 0 ? void 0 : mainMetrics.avgGamePerCompetition,\n            transactionCount: mainMetrics === null || mainMetrics === void 0 ? void 0 : mainMetrics.transactionCount,\n            avgTransactionCountPerAddress: mainMetrics === null || mainMetrics === void 0 ? void 0 : mainMetrics.avgTransactionCountPerAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FiltersArea, {\n            competition: competition,\n            competitions: competitions,\n            setCompetition: selectedCompetition => setCompetition(selectedCompetition),\n            isFilterGameToActive: isFilterGameToActive,\n            setFilterGameToActive: value => setFilterGameToActive(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            className: classes.gameContainer,\n            children: games === null || games === void 0 ? void 0 : games.map(game => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              lg: 4,\n              children: /*#__PURE__*/_jsxDEV(GameCard, {\n                competition: competition,\n                provider: provider,\n                accounts: accounts,\n                game: game,\n                bettingContract: bettingContract\n              }, game.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 7\n  }, this);else {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      code: state.code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(Dashboard, \"nYLZMgrw/pTYQfwezqBTk7MEtss=\", false, function () {\n  return [useStyles, useComponentState, useProvider];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/pages/Dashboard/index.jsx"],"names":["React","useState","useEffect","config","useComponentState","useProvider","BettingContract","Container","makeStyles","Grid","GameCard","FiltersArea","MainMetrics","unique","useStyles","gradient","backgroundImage","top","position","minHeight","gameContainer","paddingTop","Dashboard","classes","state","setState","Error","LoadingAnimation","provider","accounts","bettingContract","setBettingContract","competition","setCompetition","competitions","setCompetitions","games","setGames","isFilterGameToActive","setFilterGameToActive","mainMetrics","setMainMetrics","fetchAndSetBettingContract","_bettingContract","initial_contract_address","contract","_competitions","methods","getCompetitions","call","formattedCompetitions","map","available","cover","description","name","index","id","error","status","code","getAndSetGames","_games","getGames","formattedGames","ended","started","team1Name","team1Score","team2Name","team2Score","winner","start","_bets","Promise","all","game","bets","getBets","amount","outcome","user","uniqueUsers","bet","betsValue","reduce","prev","next","parseInt","gameId","betsCount","length","uniqueUserCount","getStats","transactionCount","uniqueAddressCount","avgTransactionCountPerAddress","avgGamePerCompetition","totalFunds","gamesCount","competitionCount","Math","ceil","utils","fromWei","slice","filter","selectedCompetition","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,iBAAT,EAA4BC,WAA5B,QAA+C,aAA/C;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,IAAhC,QAA4C,mBAA5C;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAAC,OAAO;AAClCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,kDADT;AAERC,IAAAA,GAAG,EAAE,MAFG;AAGRC,IAAAA,QAAQ,EAAE,UAHF;AAIRC,IAAAA,SAAS,EAAE;AAJH,GADwB;AAOlCC,EAAAA,aAAa,EAAE;AACbC,IAAAA,UAAU,EAAE;AADC;AAPmB,CAAP,CAAD,CAA5B;;AAYA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,OAAO,GAAGT,SAAS,EAAzB;AACA,QAAM;AAAEU,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA;AAA1B,MAA+CvB,iBAAiB,EAAtE;AACA,QAAM;AAAEwB,IAAAA,QAAF;;AAAY;AAAiBC,IAAAA;AAAS;;AAAtC,MAA0DxB,WAAW,EAA3E;AACA,QAAM,CAACyB,eAAD,EAAkBC,kBAAlB,IAAwC9B,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACiC,YAAD,EAAeC,eAAf,IAAkClC,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACmC,KAAD,EAAQC,QAAR,IAAoBpC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACqC,oBAAD,EAAuBC,qBAAvB,IAAgDtC,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAM,CAACuC,WAAD,EAAcC,cAAd,IAAgCxC,QAAQ,CAAC,IAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwC,0BAA0B,GAAG,OAAOd,QAAP,EAAiBC,QAAjB,KAA8B;AAC/D,UAAI;AACF,cAAMc,gBAAgB,GAAG,IAAIrC,eAAJ,CACvBsB,QADuB,EAEvBzB,MAAM,CAACyC,wBAFgB,EAGvBf,QAHuB,CAAzB;;AAKAE,QAAAA,kBAAkB,CAACY,gBAAgB,CAACE,QAAlB,CAAlB;;AACA,cAAMC,aAAa,GAAG,MAAMH,gBAAgB,CAACE,QAAjB,CAA0BE,OAA1B,CACzBC,eADyB,GAEzBC,IAFyB,EAA5B;;AAGA,cAAMC,qBAAqB,GAAGJ,aAAa,CAACK,GAAd,CAC5B,CAAC;AAAEC,UAAAA,SAAF;AAAaC,UAAAA,KAAb;AAAoBC,UAAAA,WAApB;AAAiCC,UAAAA;AAAjC,SAAD,EAA0CC,KAA1C,MAAqD;AACnDD,UAAAA,IADmD;AAEnDF,UAAAA,KAFmD;AAGnDC,UAAAA,WAHmD;AAInDF,UAAAA,SAJmD;AAKnDK,UAAAA,EAAE,EAAED,KAAK,GAAG;AALuC,SAArD,CAD4B,CAA9B;;AASArB,QAAAA,eAAe,CAACe,qBAAD,CAAf;AACAjB,QAAAA,cAAc,CAACiB,qBAAqB,CAAC,CAAD,CAAtB,CAAd;AACD,OArBD,CAqBE,OAAOQ,KAAP,EAAc;AACdjC,QAAAA,QAAQ,CAAC;AAAEkC,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,IAAI,EAAE;AAAzB,SAAD,CAAR;AACD;AACF,KAzBD;;AA2BA,QAAIhC,QAAQ,IAAIC,QAAhB,EAA0B;AACxBa,MAAAA,0BAA0B,CAACd,QAAD,EAAWC,QAAX,CAA1B;AACD;AACF,GA/BQ,EA+BN,CAACD,QAAD,EAAWC,QAAX,CA/BM,CAAT;AAiCA3B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2D,cAAc,GAAG,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAMhC,eAAe,CAACiB,OAAhB,CAClBgB,QADkB,CACT/B,WAAW,CAACyB,EADH,EAElBR,IAFkB,EAArB;;AAIA,YAAMe,cAAc,GAAGF,MAAM,CAACX,GAAP,CACrB,CACE;AACEE,QAAAA,KADF;AAEEC,QAAAA,WAFF;AAGEW,QAAAA,KAHF;AAIEC,QAAAA,OAJF;AAKEC,QAAAA,SALF;AAMEC,QAAAA,UANF;AAOEC,QAAAA,SAPF;AAQEC,QAAAA,UARF;AASEC,QAAAA,MATF;AAUEC,QAAAA;AAVF,OADF,EAaEhB,KAbF,MAcM;AACJH,QAAAA,KADI;AAEJC,QAAAA,WAFI;AAGJW,QAAAA,KAHI;AAIJC,QAAAA,OAJI;AAKJC,QAAAA,SALI;AAMJC,QAAAA,UANI;AAOJC,QAAAA,SAPI;AAQJC,QAAAA,UARI;AASJC,QAAAA,MATI;AAUJC,QAAAA,KAVI;AAWJf,QAAAA,EAAE,EAAED,KAAK,GAAG;AAXR,OAdN,CADqB,CAAvB;;AA8BA,YAAMiB,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAR,CAClBX,cAAc,CAACb,GAAf,CAAmB,MAAOyB,IAAP,IAAgB;AACjC,YAAIC,IAAI,GAAG,MAAM/C,eAAe,CAACiB,OAAhB,CAAwB+B,OAAxB,CAAgCF,IAAI,CAACnB,EAArC,EAAyCR,IAAzC,EAAjB;AACA4B,QAAAA,IAAI,GAAGA,IAAI,CAAC1B,GAAL,CAAS,CAAC;AAAE4B,UAAAA,MAAF;AAAUC,UAAAA,OAAV;AAAmBC,UAAAA;AAAnB,SAAD,MAAgC;AAC9CF,UAAAA,MAD8C;AAE9CC,UAAAA,OAF8C;AAG9CC,UAAAA;AAH8C,SAAhC,CAAT,CAAP;AAKA,YAAIC,WAAW,GAAGrE,MAAM,CAACgE,IAAI,CAAC1B,GAAL,CAAUgC,GAAD,IAASA,GAAG,CAACF,IAAtB,CAAD,CAAxB;AACA,YAAIG,SAAS,GAAGP,IAAI,CAACQ,MAAL,CACd,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGE,QAAQ,CAACD,IAAI,CAACR,MAAN,CADjB,EAEd,CAFc,CAAhB;AAIA,eAAO;AACLU,UAAAA,MAAM,EAAEb,IAAI,CAACnB,EADR;AAELoB,UAAAA,IAFK;AAGLa,UAAAA,SAAS,EAAEb,IAAI,CAACc,MAHX;AAILP,UAAAA,SAJK;AAKLF,UAAAA,WALK;AAMLU,UAAAA,eAAe,EAAEV,WAAW,CAACS;AANxB,SAAP;AAQD,OApBD,CADkB,CAApB;;AAyBA,YAAME,QAAQ,GAAG,CAACpB,KAAD,EAAQ3C,eAAR,EAAyBkC,cAAzB,EAAyC9B,YAAzC,KAA0D;AACzE,YAAI4D,gBAAJ,EACEC,kBADF,EAEEC,6BAFF,EAGEC,qBAHF,EAIEC,UAJF,EAKEC,UALF,EAMEC,gBANF;AAQAN,QAAAA,gBAAgB,GAAGrB,KAAK,CAACY,MAAN,CAAa,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAAI,CAACV,IAAL,CAAUc,MAA9C,EAAsD,CAAtD,CAAnB;AACAI,QAAAA,kBAAkB,GAAGlF,MAAM,CAAC4D,KAAK,CAACtB,GAAN,CAAWyB,IAAD,IAAUA,IAAI,CAACM,WAAzB,CAAD,CAAN,CAA8CS,MAAnE;AACAK,QAAAA,6BAA6B,GAAGK,IAAI,CAACC,IAAL,CAC9BR,gBAAgB,GAAGC,kBADW,CAAhC;AAGAE,QAAAA,qBAAqB,GAAGI,IAAI,CAACC,IAAL,CACtBtC,cAAc,CAAC2B,MAAf,GAAwBzD,YAAY,CAACyD,MADf,CAAxB;AAGAO,QAAAA,UAAU,GAAGpE,eAAe,CAACyE,KAAhB,CACVC,OADU,CACD,GAAE/B,KAAK,CAACY,MAAN,CAAa,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAAI,CAACH,SAAzC,EAAoD,CAApD,CAAuD,EADxD,EAEVqB,KAFU,CAEJ,CAFI,EAED,CAFC,CAAb;AAGAN,QAAAA,UAAU,GAAGnC,cAAc,CAAC2B,MAA5B;AACAS,QAAAA,gBAAgB,GAAGlE,YAAY,CAACyD,MAAhC;AACA,eAAO;AACLG,UAAAA,gBADK;AAELC,UAAAA,kBAFK;AAGLC,UAAAA,6BAHK;AAILC,UAAAA,qBAJK;AAKLC,UAAAA,UALK;AAMLC,UAAAA,UANK;AAOLC,UAAAA;AAPK,SAAP;AASD,OA/BD;;AAiCA3D,MAAAA,cAAc,CAACoD,QAAQ,CAACpB,KAAD,EAAQ3C,eAAR,EAAyBkC,cAAzB,EAAyC9B,YAAzC,CAAT,CAAd;AAEAG,MAAAA,QAAQ,CACN2B,cAAc,CAAC0C,MAAf,CAAuB9B,IAAD,IAAUA,IAAI,CAACX,KAAL,KAAe3B,oBAA/C,CADM,CAAR;AAGD,KAlGD;;AAmGA,QAAIJ,YAAY,IAAIF,WAApB,EAAiC;AAC/B6B,MAAAA,cAAc;AACf;AACF,GAvGQ,EAuGN,CAAC3B,YAAD,EAAeF,WAAf,EAA4BF,eAA5B,EAA6CQ,oBAA7C,CAvGM,CAAT;AAyGA,MAAId,KAAK,CAACmC,MAAN,KAAiB,SAArB,EAAgC,oBAAO,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,UAAP,CAAhC,KACK,IAAInC,KAAK,CAACmC,MAAN,KAAiB,QAArB,EACH,oBACE;AAAK,IAAA,SAAS,EAAEpC,OAAO,CAACR,QAAxB;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAA,iCACE,QAAC,WAAD;AACE,YAAA,SAAS,EAAEyB,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEuD,kBAD1B;AAEE,YAAA,UAAU,EAAEvD,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAE0D,UAF3B;AAGE,YAAA,gBAAgB,EAAE1D,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAE4D,gBAHjC;AAIE,YAAA,SAAS,EAAE5D,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAE2D,UAJ1B;AAKE,YAAA,qBAAqB,EAAE3D,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEyD,qBALtC;AAME,YAAA,gBAAgB,EAAEzD,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEsD,gBANjC;AAOE,YAAA,6BAA6B,EAC3BtD,WAD2B,aAC3BA,WAD2B,uBAC3BA,WAAW,CAAEwD;AARjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAcE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAA,iCACE,QAAC,WAAD;AACE,YAAA,WAAW,EAAEhE,WADf;AAEE,YAAA,YAAY,EAAEE,YAFhB;AAGE,YAAA,cAAc,EAAGyE,mBAAD,IACd1E,cAAc,CAAC0E,mBAAD,CAJlB;AAME,YAAA,oBAAoB,EAAErE,oBANxB;AAOE,YAAA,qBAAqB,EAAGsE,KAAD,IAAWrE,qBAAqB,CAACqE,KAAD;AAPzD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAdF,eAyBE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,OAAO,EAAE,CAAzB;AAA4B,YAAA,SAAS,EAAErF,OAAO,CAACH,aAA/C;AAAA,sBACGgB,KADH,aACGA,KADH,uBACGA,KAAK,CAAEe,GAAP,CAAYyB,IAAD,iBACV,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAmB,cAAA,EAAE,EAAE,CAAvB;AAAA,qCACE,QAAC,QAAD;AAEE,gBAAA,WAAW,EAAE5C,WAFf;AAGE,gBAAA,QAAQ,EAAEJ,QAHZ;AAIE,gBAAA,QAAQ,EAAEC,QAJZ;AAKE,gBAAA,IAAI,EAAE+C,IALR;AAME,gBAAA,eAAe,EAAE9C;AANnB,iBACO8C,IAAI,CAACnB,EADZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,CADG,KAiDA;AACH,wBAAO,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEjC,KAAK,CAACoC;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF,CA1MD;;GAAMtC,S;UACYR,S,EACqCV,iB,EACWC,W;;;KAH5DiB,S;AA4MN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport config from \"../../config/index\";\nimport { useComponentState, useProvider } from \"../../hooks\";\nimport { BettingContract } from \"../../services/Contract\";\nimport { Container, makeStyles, Grid } from \"@material-ui/core\";\nimport GameCard from \"../../components/GameCard\";\nimport FiltersArea from \"../../components/FiltersArea\";\nimport MainMetrics from \"../../components/MainMetrics\";\nimport { unique } from \"../../utils\";\n\nconst useStyles = makeStyles(() => ({\n  gradient: {\n    backgroundImage: \"linear-gradient(315deg, #ffffff 0%, #d7e1ec 74%)\",\n    top: \"4rem\",\n    position: \"relative\",\n    minHeight: \"100vh\",\n  },\n  gameContainer: {\n    paddingTop: 16,\n  },\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  const { state, setState, Error, LoadingAnimation } = useComponentState();\n  const { provider, /*setProvider,*/ accounts /*setAccounts*/ } = useProvider();\n  const [bettingContract, setBettingContract] = useState(null);\n  const [competition, setCompetition] = useState(null);\n  const [competitions, setCompetitions] = useState(null);\n  const [games, setGames] = useState(null);\n  const [isFilterGameToActive, setFilterGameToActive] = useState(true);\n  const [mainMetrics, setMainMetrics] = useState(null);\n\n  useEffect(() => {\n    const fetchAndSetBettingContract = async (provider, accounts) => {\n      try {\n        const _bettingContract = new BettingContract(\n          provider,\n          config.initial_contract_address,\n          accounts\n        );\n        setBettingContract(_bettingContract.contract);\n        const _competitions = await _bettingContract.contract.methods\n          .getCompetitions()\n          .call();\n        const formattedCompetitions = _competitions.map(\n          ({ available, cover, description, name }, index) => ({\n            name,\n            cover,\n            description,\n            available,\n            id: index + 1,\n          })\n        );\n        setCompetitions(formattedCompetitions);\n        setCompetition(formattedCompetitions[0]);\n      } catch (error) {\n        setState({ status: \"error\", code: 500 });\n      }\n    };\n\n    if (provider && accounts) {\n      fetchAndSetBettingContract(provider, accounts);\n    }\n  }, [provider, accounts]);\n\n  useEffect(() => {\n    const getAndSetGames = async () => {\n      const _games = await bettingContract.methods\n        .getGames(competition.id)\n        .call();\n\n      const formattedGames = _games.map(\n        (\n          {\n            cover,\n            description,\n            ended,\n            started,\n            team1Name,\n            team1Score,\n            team2Name,\n            team2Score,\n            winner,\n            start,\n          },\n          index\n        ) => ({\n          cover,\n          description,\n          ended,\n          started,\n          team1Name,\n          team1Score,\n          team2Name,\n          team2Score,\n          winner,\n          start,\n          id: index + 1,\n        })\n      );\n\n      const _bets = await Promise.all(\n        formattedGames.map(async (game) => {\n          let bets = await bettingContract.methods.getBets(game.id).call();\n          bets = bets.map(({ amount, outcome, user }) => ({\n            amount,\n            outcome,\n            user,\n          }));\n          let uniqueUsers = unique(bets.map((bet) => bet.user));\n          let betsValue = bets.reduce(\n            (prev, next) => prev + parseInt(next.amount),\n            0\n          );\n          return {\n            gameId: game.id,\n            bets,\n            betsCount: bets.length,\n            betsValue,\n            uniqueUsers,\n            uniqueUserCount: uniqueUsers.length,\n          };\n        })\n      );\n\n\n      const getStats = (_bets, bettingContract, formattedGames, competitions) => {\n        let transactionCount,\n          uniqueAddressCount,\n          avgTransactionCountPerAddress,\n          avgGamePerCompetition,\n          totalFunds,\n          gamesCount,\n          competitionCount;\n      \n        transactionCount = _bets.reduce((prev, next) => prev + next.bets.length, 0);\n        uniqueAddressCount = unique(_bets.map((game) => game.uniqueUsers)).length;\n        avgTransactionCountPerAddress = Math.ceil(\n          transactionCount / uniqueAddressCount\n        );\n        avgGamePerCompetition = Math.ceil(\n          formattedGames.length / competitions.length\n        );\n        totalFunds = bettingContract.utils\n          .fromWei(`${_bets.reduce((prev, next) => prev + next.betsValue, 0)}`)\n          .slice(0, 4);\n        gamesCount = formattedGames.length;\n        competitionCount = competitions.length;\n        return {\n          transactionCount,\n          uniqueAddressCount,\n          avgTransactionCountPerAddress,\n          avgGamePerCompetition,\n          totalFunds,\n          gamesCount,\n          competitionCount,\n        };\n      };\n\n      setMainMetrics(getStats(_bets, bettingContract, formattedGames, competitions));\n\n      setGames(\n        formattedGames.filter((game) => game.ended !== isFilterGameToActive)\n      );\n    };\n    if (competitions && competition) {\n      getAndSetGames();\n    }\n  }, [competitions, competition, bettingContract, isFilterGameToActive]);\n\n  if (state.status === \"loading\") return <LoadingAnimation />;\n  else if (state.status === \"loaded\")\n    return (\n      <div className={classes.gradient}>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <MainMetrics\n                userCount={mainMetrics?.uniqueAddressCount}\n                totalFunds={mainMetrics?.totalFunds}\n                competitionCount={mainMetrics?.competitionCount}\n                gameCount={mainMetrics?.gamesCount}\n                avgGamePerCompetition={mainMetrics?.avgGamePerCompetition}\n                transactionCount={mainMetrics?.transactionCount}\n                avgTransactionCountPerAddress={\n                  mainMetrics?.avgTransactionCountPerAddress\n                }\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FiltersArea\n                competition={competition}\n                competitions={competitions}\n                setCompetition={(selectedCompetition) =>\n                  setCompetition(selectedCompetition)\n                }\n                isFilterGameToActive={isFilterGameToActive}\n                setFilterGameToActive={(value) => setFilterGameToActive(value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2} className={classes.gameContainer}>\n                {games?.map((game) => (\n                  <Grid item xs={12} lg={4}>\n                    <GameCard\n                      key={game.id}\n                      competition={competition}\n                      provider={provider}\n                      accounts={accounts}\n                      game={game}\n                      bettingContract={bettingContract}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  else {\n    return <Error code={state.code} />;\n  }\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport config from \"../config\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport LoadingAnimation from \"../components/LoadingAnimation/index\";\nimport Error from \"../components/Error/index\"; // make web3 provider and accounts available for component using this hook\n\nconst useProvider = setState => {\n  _s();\n\n  const [provider, setProvider] = useState();\n  const [accounts, setAccounts] = useState();\n  useEffect(() => {\n    const getAndSetAccounts = async web3 => {\n      const accounts = await web3.eth.getAccounts();\n\n      if (accounts.length > 0) {\n        setAccounts(accounts);\n      } else {\n        setState({\n          status: \"error\",\n          code: 499\n        });\n      }\n    };\n\n    const getAndSetProvider = async () => {\n      if (process.env.NODE_ENV === \"development\") {\n        const web3 = new Web3(config.provider_url);\n        setProvider(web3);\n        web3 && getAndSetAccounts(web3);\n      } else {\n        const provider = await detectEthereumProvider();\n\n        if (provider) {\n          const web3 = new Web3(provider);\n          setProvider(web3);\n          web3 && getAndSetAccounts(web3);\n        } else {\n          setState({\n            status: \"error\",\n            code: 499\n          });\n        }\n      }\n    };\n\n    getAndSetProvider();\n  }, [setState]);\n  return {\n    provider,\n    setProvider,\n    accounts,\n    setAccounts\n  };\n}; // make available state setState, LoadingAnimation and error to components implementing this hook\n\n\n_s(useProvider, \"nctUs3kUB67avmnvsekndT/1bs4=\");\n\nconst useComponentState = () => {\n  _s2();\n\n  const [isModalToogled, setModalToogled] = useState(false);\n  const [alert, setAlert] = useState({\n    toogled: false,\n    message: \"\",\n    type: \"error\"\n  });\n  const [state, setState] = useState({\n    status: \"loaded\",\n    code: null\n  });\n  return {\n    setState,\n    state,\n    isModalToogled,\n    setModalToogled,\n    LoadingAnimation,\n    Error\n  };\n};\n\n_s2(useComponentState, \"gPTWioQ0DqCUkO2izeH3HGLA+qI=\");\n\nexport { useProvider, useComponentState };","map":{"version":3,"sources":["/home/bitch1y/Documents/PROJECTS/ETHEREUM/SportsOnTheBlock/client/src/hooks/index.js"],"names":["useEffect","useState","config","Web3","detectEthereumProvider","LoadingAnimation","Error","useProvider","setState","provider","setProvider","accounts","setAccounts","getAndSetAccounts","web3","eth","getAccounts","length","status","code","getAndSetProvider","process","env","NODE_ENV","provider_url","useComponentState","isModalToogled","setModalToogled","alert","setAlert","toogled","message","type","state"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,KAAP,MAAkB,2BAAlB,C,CAEA;;AACA,MAAMC,WAAW,GAAIC,QAAD,IAAc;AAAA;;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,EAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,iBAAiB,GAAG,MAAOC,IAAP,IAAgB;AACxC,YAAMH,QAAQ,GAAG,MAAMG,IAAI,CAACC,GAAL,CAASC,WAAT,EAAvB;;AACA,UAAIL,QAAQ,CAACM,MAAT,GAAkB,CAAtB,EAAyB;AACvBL,QAAAA,WAAW,CAACD,QAAD,CAAX;AACD,OAFD,MAEO;AACLH,QAAAA,QAAQ,CAAC;AAAEU,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,IAAI,EAAE;AAAzB,SAAD,CAAR;AACD;AACF,KAPD;;AASA,UAAMC,iBAAiB,GAAG,YAAY;AACpC,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C,cAAMT,IAAI,GAAG,IAAIX,IAAJ,CAASD,MAAM,CAACsB,YAAhB,CAAb;AACAd,QAAAA,WAAW,CAACI,IAAD,CAAX;AACAA,QAAAA,IAAI,IAAID,iBAAiB,CAACC,IAAD,CAAzB;AACD,OAJD,MAIO;AACL,cAAML,QAAQ,GAAG,MAAML,sBAAsB,EAA7C;;AACA,YAAIK,QAAJ,EAAc;AACZ,gBAAMK,IAAI,GAAG,IAAIX,IAAJ,CAASM,QAAT,CAAb;AACAC,UAAAA,WAAW,CAACI,IAAD,CAAX;AACAA,UAAAA,IAAI,IAAID,iBAAiB,CAACC,IAAD,CAAzB;AACD,SAJD,MAIO;AACLN,UAAAA,QAAQ,CAAC;AAAEU,YAAAA,MAAM,EAAE,OAAV;AAAmBC,YAAAA,IAAI,EAAE;AAAzB,WAAD,CAAR;AACD;AACF;AACF,KAfD;;AAiBAC,IAAAA,iBAAiB;AAClB,GA5BQ,EA4BN,CAACZ,QAAD,CA5BM,CAAT;AA8BA,SAAO;AACLC,IAAAA,QADK;AAELC,IAAAA,WAFK;AAGLC,IAAAA,QAHK;AAILC,IAAAA;AAJK,GAAP;AAMD,CAxCD,C,CA0CA;;;GA1CML,W;;AA2CN,MAAMkB,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,cAAD,EAAiBC,eAAjB,IAAoC1B,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC2B,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAAC;AACjC6B,IAAAA,OAAO,EAAE,KADwB;AAEjCC,IAAAA,OAAO,EAAE,EAFwB;AAGjCC,IAAAA,IAAI,EAAE;AAH2B,GAAD,CAAlC;AAKA,QAAM,CAACC,KAAD,EAAQzB,QAAR,IAAoBP,QAAQ,CAAC;AACjCiB,IAAAA,MAAM,EAAE,QADyB;AAEjCC,IAAAA,IAAI,EAAE;AAF2B,GAAD,CAAlC;AAKA,SAAO;AAELX,IAAAA,QAFK;AAGLyB,IAAAA,KAHK;AAILP,IAAAA,cAJK;AAKLC,IAAAA,eALK;AAMLtB,IAAAA,gBANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CArBD;;IAAMmB,iB;;AAuBN,SAASlB,WAAT,EAAsBkB,iBAAtB","sourcesContent":["import { useEffect, useState } from \"react\";\nimport config from \"../config\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport LoadingAnimation from \"../components/LoadingAnimation/index\";\nimport Error from \"../components/Error/index\";\n\n// make web3 provider and accounts available for component using this hook\nconst useProvider = (setState) => {\n  const [provider, setProvider] = useState();\n  const [accounts, setAccounts] = useState();\n\n  useEffect(() => {\n    const getAndSetAccounts = async (web3) => {\n      const accounts = await web3.eth.getAccounts();\n      if (accounts.length > 0) {\n        setAccounts(accounts);\n      } else {\n        setState({ status: \"error\", code: 499 });\n      }\n    };\n\n    const getAndSetProvider = async () => {\n      if (process.env.NODE_ENV === \"development\") {\n        const web3 = new Web3(config.provider_url);\n        setProvider(web3);\n        web3 && getAndSetAccounts(web3);\n      } else {\n        const provider = await detectEthereumProvider();\n        if (provider) {\n          const web3 = new Web3(provider);\n          setProvider(web3);\n          web3 && getAndSetAccounts(web3);\n        } else {\n          setState({ status: \"error\", code: 499 });\n        }\n      }\n    };\n\n    getAndSetProvider();\n  }, [setState]);\n\n  return {\n    provider,\n    setProvider,\n    accounts,\n    setAccounts,\n  };\n};\n\n// make available state setState, LoadingAnimation and error to components implementing this hook\nconst useComponentState = () => {\n  const [isModalToogled, setModalToogled] = useState(false);\n  const [alert, setAlert] = useState({\n    toogled: false,\n    message: \"\",\n    type: \"error\",\n  });\n  const [state, setState] = useState({\n    status: \"loaded\",\n    code: null,\n  });\n\n  return {\n    \n    setState,\n    state,\n    isModalToogled,\n    setModalToogled,\n    LoadingAnimation,\n    Error,\n  };\n};\n\nexport { useProvider, useComponentState };\n"]},"metadata":{},"sourceType":"module"}